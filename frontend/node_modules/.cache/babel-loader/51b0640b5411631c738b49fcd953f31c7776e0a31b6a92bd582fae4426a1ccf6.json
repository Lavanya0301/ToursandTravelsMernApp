{"ast":null,"code":"/**\n * Utilities\n * @module utils\n * @borrows module:auth_token as generate_auth_token\n */\n\nconst crypto = require(\"crypto\");\nconst querystring = require(\"querystring\");\nconst urlParse = require(\"url\").parse;\n\n// Functions used internally\nconst compact = require(\"lodash/compact\");\nconst first = require(\"lodash/first\");\nconst isFunction = require(\"lodash/isFunction\");\nconst isPlainObject = require(\"lodash/isPlainObject\");\nconst last = require(\"lodash/last\");\nconst map = require(\"lodash/map\");\nconst take = require(\"lodash/take\");\nconst at = require(\"lodash/at\");\n\n// Exposed by the module\nconst clone = require(\"lodash/clone\");\nconst extend = require(\"lodash/extend\");\nconst filter = require(\"lodash/filter\");\nconst includes = require(\"lodash/includes\");\nconst isArray = require(\"lodash/isArray\");\nconst isEmpty = require(\"lodash/isEmpty\");\nconst isNumber = require(\"lodash/isNumber\");\nconst isObject = require(\"lodash/isObject\");\nconst isString = require(\"lodash/isString\");\nconst isUndefined = require(\"lodash/isUndefined\");\nconst smart_escape = require(\"./encoding/smart_escape\");\nconst consumeOption = require('./parsing/consumeOption');\nconst toArray = require('./parsing/toArray');\nlet {\n  base64EncodeURL\n} = require('./encoding/base64EncodeURL');\nconst encodeDoubleArray = require('./encoding/encodeDoubleArray');\nconst config = require(\"../config\");\nconst generate_token = require(\"../auth_token\");\nconst utf8_encode = require('./utf8_encode');\nconst crc32 = require('./crc32');\nconst ensurePresenceOf = require('./ensurePresenceOf');\nconst ensureOption = require('./ensureOption').defaults(config());\nconst entries = require('./entries');\nconst isRemoteUrl = require('./isRemoteUrl');\nconst getSDKVersions = require('./encoding/sdkAnalytics/getSDKVersions');\nconst {\n  getAnalyticsOptions,\n  getSDKAnalyticsSignature\n} = require('cloudinary-core').Util;\nexports = module.exports;\nconst utils = module.exports;\ntry {\n  // eslint-disable-next-line global-require\n  utils.VERSION = require('../../package.json').version;\n} catch (error) {\n  utils.VERSION = '';\n}\nfunction generate_auth_token(options) {\n  let token_options = Object.assign({}, config().auth_token, options);\n  return generate_token(token_options);\n}\nexports.CF_SHARED_CDN = \"d3jpl91pxevbkh.cloudfront.net\";\nexports.OLD_AKAMAI_SHARED_CDN = \"cloudinary-a.akamaihd.net\";\nexports.AKAMAI_SHARED_CDN = \"res.cloudinary.com\";\nexports.SHARED_CDN = exports.AKAMAI_SHARED_CDN;\nexports.USER_AGENT = `CloudinaryNodeJS/${exports.VERSION} (Node ${process.versions.node})`;\n\n// Add platform information to the USER_AGENT header\n// This is intended for platform information and not individual applications!\nexports.userPlatform = \"\";\nfunction getUserAgent() {\n  return isEmpty(utils.userPlatform) ? `${utils.USER_AGENT}` : `${utils.userPlatform} ${utils.USER_AGENT}`;\n}\nconst {\n  DEFAULT_RESPONSIVE_WIDTH_TRANSFORMATION,\n  DEFAULT_POSTER_OPTIONS,\n  DEFAULT_VIDEO_SOURCE_TYPES,\n  CONDITIONAL_OPERATORS,\n  PREDEFINED_VARS,\n  LAYER_KEYWORD_PARAMS,\n  TRANSFORMATION_PARAMS,\n  SIMPLE_PARAMS,\n  UPLOAD_PREFIX,\n  SUPPORTED_SIGNATURE_ALGORITHMS,\n  DEFAULT_SIGNATURE_ALGORITHM\n} = require('./consts');\nfunction textStyle(layer) {\n  let keywords = [];\n  let style = \"\";\n  if (!isEmpty(layer.text_style)) {\n    return layer.text_style;\n  }\n  Object.keys(LAYER_KEYWORD_PARAMS).forEach(attr => {\n    let default_value = LAYER_KEYWORD_PARAMS[attr];\n    let attr_value = layer[attr] || default_value;\n    if (attr_value !== default_value) {\n      keywords.push(attr_value);\n    }\n  });\n  Object.keys(layer).forEach(attr => {\n    if (attr === \"letter_spacing\" || attr === \"line_spacing\") {\n      keywords.push(`${attr}_${layer[attr]}`);\n    }\n    if (attr === \"font_hinting\") {\n      keywords.push(`${attr.split(\"_\").pop()}_${layer[attr]}`);\n    }\n    if (attr === \"font_antialiasing\") {\n      keywords.push(`antialias_${layer[attr]}`);\n    }\n  });\n  if (layer.hasOwnProperty(\"font_size\" || \"font_family\") || !isEmpty(keywords)) {\n    if (!layer.font_size) throw `Must supply font_size for text in overlay/underlay`;\n    if (!layer.font_family) throw `Must supply font_family for text in overlay/underlay`;\n    keywords.unshift(layer.font_size);\n    keywords.unshift(layer.font_family);\n    style = compact(keywords).join(\"_\");\n  }\n  return style;\n}\n\n/**\n * Normalize an expression string, replace \"nice names\" with their coded values and spaces with \"_\"\n * e.g. `width > 0` => `w_lt_0`\n *\n * @param {String} expression An expression to be normalized\n * @return {Object|String} A normalized String of the input value if possible otherwise the value itself\n */\nfunction normalize_expression(expression) {\n  if (!isString(expression) || expression.length === 0 || expression.match(/^!.+!$/)) {\n    return expression;\n  }\n  const operators = \"\\\\|\\\\||>=|<=|&&|!=|>|=|<|/|-|\\\\^|\\\\+|\\\\*\";\n  const operatorsPattern = \"((\" + operators + \")(?=[ _]))\";\n  const operatorsReplaceRE = new RegExp(operatorsPattern, \"g\");\n  expression = expression.replace(operatorsReplaceRE, match => CONDITIONAL_OPERATORS[match]);\n\n  // Duplicate PREDEFINED_VARS to also include :{var_name} as well as {var_name}\n  // Example:\n  // -- PREDEFINED_VARS = ['foo']\n  // -- predefinedVarsPattern = ':foo|foo'\n  // It is done like this because node 6 does not support regex lookbehind\n  const predefinedVarsPattern = \"(\" + Object.keys(PREDEFINED_VARS).map(v => `:${v}|${v}`).join(\"|\") + \")\";\n  const userVariablePattern = '(\\\\$_*[^_ ]+)';\n  const variablesReplaceRE = new RegExp(`${userVariablePattern}|${predefinedVarsPattern}`, \"g\");\n  expression = expression.replace(variablesReplaceRE, match => PREDEFINED_VARS[match] || match);\n  return expression.replace(/[ _]+/g, '_');\n}\n\n/**\n * Parse custom_function options\n * @private\n * @param {object|*} customFunction a custom function object containing function_type and source values\n * @return {string|*} custom_function transformation string\n */\nfunction process_custom_function(customFunction) {\n  if (!isObject(customFunction)) {\n    return customFunction;\n  }\n  if (customFunction.function_type === \"remote\") {\n    const encodedSource = base64EncodeURL(customFunction.source);\n    return [customFunction.function_type, encodedSource].join(\":\");\n  }\n  return [customFunction.function_type, customFunction.source].join(\":\");\n}\n\n/**\n * Parse custom_pre_function options\n * @private\n * @param {object|*} customPreFunction a custom function object containing function_type and source values\n * @return {string|*} custom_pre_function transformation string\n */\nfunction process_custom_pre_function(customPreFunction) {\n  let result = process_custom_function(customPreFunction);\n  return utils.isString(result) ? `pre:${result}` : null;\n}\n\n/**\n * Parse \"if\" parameter\n * Translates the condition if provided.\n * @private\n * @return {string} \"if_\" + ifValue\n */\nfunction process_if(ifValue) {\n  return ifValue ? \"if_\" + normalize_expression(ifValue) : ifValue;\n}\n\n/**\n * Parse layer options\n * @private\n * @param {object|*} layer The layer to parse.\n * @return {string} layer transformation string\n */\nfunction process_layer(layer) {\n  let result = '';\n  if (isPlainObject(layer)) {\n    if (layer.resource_type === \"fetch\" || layer.url != null) {\n      result = `fetch:${base64EncodeURL(layer.url)}`;\n    } else {\n      let public_id = layer.public_id;\n      let format = layer.format;\n      let resource_type = layer.resource_type || \"image\";\n      let type = layer.type || \"upload\";\n      let text = layer.text;\n      let style = null;\n      let components = [];\n      const noPublicId = isEmpty(public_id);\n      if (!noPublicId) {\n        public_id = public_id.replace(new RegExp(\"/\", 'g'), \":\");\n        if (format != null) {\n          public_id = `${public_id}.${format}`;\n        }\n      }\n      if (isEmpty(text) && resource_type !== \"text\") {\n        if (noPublicId) {\n          throw \"Must supply public_id for resource_type layer_parameter\";\n        }\n        if (resource_type === \"subtitles\") {\n          style = textStyle(layer);\n        }\n      } else {\n        resource_type = \"text\";\n        type = null;\n        // type is ignored for text layers\n        style = textStyle(layer);\n        if (!isEmpty(text)) {\n          const noStyle = isEmpty(style);\n          if (!(noPublicId || noStyle) || noPublicId && noStyle) {\n            throw \"Must supply either style parameters or a public_id when providing text parameter in a text overlay/underlay\";\n          }\n          let re = /\\$\\([a-zA-Z]\\w*\\)/g;\n          let start = 0;\n          let textSource = smart_escape(decodeURIComponent(text), /[,\\/]/g);\n          text = \"\";\n          for (let res = re.exec(textSource); res; res = re.exec(textSource)) {\n            text += smart_escape(textSource.slice(start, res.index));\n            text += res[0];\n            start = res.index + res[0].length;\n          }\n          text += encodeURIComponent(textSource.slice(start));\n        }\n      }\n      if (resource_type !== \"image\") {\n        components.push(resource_type);\n      }\n      if (type !== \"upload\") {\n        components.push(type);\n      }\n      components.push(style);\n      components.push(public_id);\n      components.push(text);\n      result = compact(components).join(\":\");\n    }\n  } else if (/^fetch:.+/.test(layer)) {\n    result = `fetch:${base64EncodeURL(layer.substr(6))}`;\n  } else {\n    result = layer;\n  }\n  return result;\n}\n\n/**\n * Parse radius options\n * @private\n * @param {Array<string|number>|string|number} radius The radius to parse\n * @return {string} radius transformation string\n */\nfunction process_radius(radius) {\n  if (!radius) {\n    return radius;\n  }\n  if (!isArray(radius)) {\n    radius = [radius];\n  }\n  if (radius.length === 0 || radius.length > 4) {\n    throw new Error(\"Radius array should contain between 1 and 4 values\");\n  }\n  if (radius.findIndex(x => x === null) >= 0) {\n    throw new Error(\"Corner: Cannot be null\");\n  }\n  return radius.map(normalize_expression).join(':');\n}\nfunction build_multi_and_sprite_params(tagOrOptions, options) {\n  let tag = null;\n  if (typeof tagOrOptions === 'string') {\n    tag = tagOrOptions;\n  } else {\n    if (isEmpty(options)) {\n      options = tagOrOptions;\n    } else {\n      throw new Error('First argument must be a tag when additional options are passed');\n    }\n    tag = null;\n  }\n  if (!options && !tag) {\n    throw new Error('Either tag or urls are required');\n  }\n  if (!options) {\n    options = {};\n  }\n  const urls = options.urls;\n  const transformation = generate_transformation_string(extend({}, options, {\n    fetch_format: options.format\n  }));\n  return {\n    tag,\n    transformation,\n    urls,\n    timestamp: utils.timestamp(),\n    async: options.async,\n    notification_url: options.notification_url\n  };\n}\nfunction build_upload_params(options) {\n  let params = {\n    access_mode: options.access_mode,\n    allowed_formats: options.allowed_formats && toArray(options.allowed_formats).join(\",\"),\n    asset_folder: options.asset_folder,\n    async: utils.as_safe_bool(options.async),\n    backup: utils.as_safe_bool(options.backup),\n    callback: options.callback,\n    cinemagraph_analysis: utils.as_safe_bool(options.cinemagraph_analysis),\n    colors: utils.as_safe_bool(options.colors),\n    display_name: options.display_name,\n    discard_original_filename: utils.as_safe_bool(options.discard_original_filename),\n    eager: utils.build_eager(options.eager),\n    eager_async: utils.as_safe_bool(options.eager_async),\n    eager_notification_url: options.eager_notification_url,\n    eval: options.eval,\n    exif: utils.as_safe_bool(options.exif),\n    faces: utils.as_safe_bool(options.faces),\n    folder: options.folder,\n    format: options.format,\n    filename_override: options.filename_override,\n    image_metadata: utils.as_safe_bool(options.image_metadata),\n    media_metadata: utils.as_safe_bool(options.media_metadata),\n    invalidate: utils.as_safe_bool(options.invalidate),\n    moderation: options.moderation,\n    notification_url: options.notification_url,\n    overwrite: utils.as_safe_bool(options.overwrite),\n    phash: utils.as_safe_bool(options.phash),\n    proxy: options.proxy,\n    public_id: options.public_id,\n    public_id_prefix: options.public_id_prefix,\n    quality_analysis: utils.as_safe_bool(options.quality_analysis),\n    responsive_breakpoints: utils.generate_responsive_breakpoints_string(options.responsive_breakpoints),\n    return_delete_token: utils.as_safe_bool(options.return_delete_token),\n    timestamp: options.timestamp || exports.timestamp(),\n    transformation: utils.generate_transformation_string(clone(options)),\n    type: options.type,\n    unique_filename: utils.as_safe_bool(options.unique_filename),\n    upload_preset: options.upload_preset,\n    use_filename: utils.as_safe_bool(options.use_filename),\n    use_filename_as_display_name: utils.as_safe_bool(options.use_filename_as_display_name),\n    quality_override: options.quality_override,\n    accessibility_analysis: utils.as_safe_bool(options.accessibility_analysis),\n    use_asset_folder_as_public_id_prefix: utils.as_safe_bool(options.use_asset_folder_as_public_id_prefix)\n  };\n  return utils.updateable_resource_params(options, params);\n}\nfunction encode_key_value(arg) {\n  if (!isObject(arg)) {\n    return arg;\n  }\n  return entries(arg).map(_ref => {\n    let [k, v] = _ref;\n    return `${k}=${v}`;\n  }).join('|');\n}\n\n/**\n * @description Escape = and | with two backslashes \\\\\n * @param {string|number} value\n * @return {string}\n */\nfunction escapeMetadataValue(value) {\n  return value.toString().replace(/([=|])/g, '\\\\$&');\n}\n\n/**\n *\n * @description Encode metadata fields based on incoming value.\n *              If array, escape as color_id=[\\\"green\\\",\\\"red\\\"]\n *              If string/number, escape as in_stock_id=50\n *\n *              Joins resulting values with a pipe:\n *              in_stock_id=50|color_id=[\\\"green\\\",\\\"red\\\"]\n *\n *              = and | and escaped by default (this can't be turned off)\n *\n * @param metadataObj\n * @return {string}\n */\nfunction encode_context(metadataObj) {\n  if (!isObject(metadataObj)) {\n    return metadataObj;\n  }\n  return entries(metadataObj).map(_ref2 => {\n    let [key, value] = _ref2;\n    // if string, simply parse the value and move on\n    if (isString(value)) {\n      return `${key}=${escapeMetadataValue(value)}`;\n\n      // If array, parse each item individually\n    } else if (isArray(value)) {\n      let values = value.map(innerVal => {\n        return `\\\"${escapeMetadataValue(innerVal)}\\\"`;\n      }).join(',');\n      return `${key}=[${values}]`;\n      // if unknown, return the value as string\n    } else {\n      return value.toString();\n    }\n  }).join('|');\n}\nfunction build_eager(transformations) {\n  return toArray(transformations).map(transformation => {\n    const transformationString = utils.generate_transformation_string(clone(transformation));\n    const format = transformation.format;\n    return format == null ? transformationString : `${transformationString}/${format}`;\n  }).join('|');\n}\n/**\n * Build the custom headers for the request\n * @private\n * @param headers\n * @return {Array<string>|object|string} An object of name and value,\n *         an array of header strings, or a string of headers\n */\nfunction build_custom_headers(headers) {\n  switch (true) {\n    case headers == null:\n      return void 0;\n    case isArray(headers):\n      return headers.join(\"\\n\");\n    case isObject(headers):\n      return entries(headers).map(_ref3 => {\n        let [k, v] = _ref3;\n        return `${k}:${v}`;\n      }).join(\"\\n\");\n    default:\n      return headers;\n  }\n}\nfunction generate_transformation_string(options) {\n  if (utils.isString(options)) {\n    return options;\n  }\n  if (isArray(options)) {\n    return options.map(t => utils.generate_transformation_string(clone(t))).filter(utils.present).join('/');\n  }\n  let responsive_width = consumeOption(options, \"responsive_width\", config().responsive_width);\n  let width = options.width;\n  let height = options.height;\n  let size = consumeOption(options, \"size\");\n  if (size) {\n    [width, height] = size.split(\"x\");\n    [options.width, options.height] = [width, height];\n  }\n  let has_layer = options.overlay || options.underlay;\n  let crop = consumeOption(options, \"crop\");\n  let angle = toArray(consumeOption(options, \"angle\")).join(\".\");\n  let no_html_sizes = has_layer || utils.present(angle) || crop === \"fit\" || crop === \"limit\" || responsive_width;\n  if (width && (width.toString().indexOf(\"auto\") === 0 || no_html_sizes || parseFloat(width) < 1)) {\n    delete options.width;\n  }\n  if (height && (no_html_sizes || parseFloat(height) < 1)) {\n    delete options.height;\n  }\n  let background = consumeOption(options, \"background\");\n  background = background && background.replace(/^#/, \"rgb:\");\n  let color = consumeOption(options, \"color\");\n  color = color && color.replace(/^#/, \"rgb:\");\n  let base_transformations = toArray(consumeOption(options, \"transformation\", []));\n  let named_transformation = [];\n  if (base_transformations.some(isObject)) {\n    base_transformations = base_transformations.map(tr => utils.generate_transformation_string(isObject(tr) ? clone(tr) : {\n      transformation: tr\n    }));\n  } else {\n    named_transformation = base_transformations.join(\".\");\n    base_transformations = [];\n  }\n  let effect = consumeOption(options, \"effect\");\n  if (isArray(effect)) {\n    effect = effect.join(\":\");\n  } else if (isObject(effect)) {\n    effect = entries(effect).map(_ref4 => {\n      let [key, value] = _ref4;\n      return `${key}:${value}`;\n    });\n  }\n  let border = consumeOption(options, \"border\");\n  if (isObject(border)) {\n    border = `${border.width != null ? border.width : 2}px_solid_${(border.color != null ? border.color : \"black\").replace(/^#/, 'rgb:')}`;\n  } else if (/^\\d+$/.exec(border)) {\n    // fallback to html border attributes\n    options.border = border;\n    border = void 0;\n  }\n  let flags = toArray(consumeOption(options, \"flags\")).join(\".\");\n  let dpr = consumeOption(options, \"dpr\", config().dpr);\n  if (options.offset != null) {\n    [options.start_offset, options.end_offset] = split_range(consumeOption(options, \"offset\"));\n  }\n  if (options.start_offset) {\n    options.start_offset = normalize_expression(options.start_offset);\n  }\n  if (options.end_offset) {\n    options.end_offset = normalize_expression(options.end_offset);\n  }\n  let overlay = process_layer(consumeOption(options, \"overlay\"));\n  let radius = process_radius(consumeOption(options, \"radius\"));\n  let underlay = process_layer(consumeOption(options, \"underlay\"));\n  let ifValue = process_if(consumeOption(options, \"if\"));\n  let custom_function = process_custom_function(consumeOption(options, \"custom_function\"));\n  let custom_pre_function = process_custom_pre_function(consumeOption(options, \"custom_pre_function\"));\n  let fps = consumeOption(options, 'fps');\n  if (isArray(fps)) {\n    fps = fps.join('-');\n  }\n  let params = {\n    a: normalize_expression(angle),\n    ar: normalize_expression(consumeOption(options, \"aspect_ratio\")),\n    b: background,\n    bo: border,\n    c: crop,\n    co: color,\n    dpr: normalize_expression(dpr),\n    e: normalize_expression(effect),\n    fl: flags,\n    fn: custom_function || custom_pre_function,\n    fps: fps,\n    h: normalize_expression(height),\n    ki: normalize_expression(consumeOption(options, \"keyframe_interval\")),\n    l: overlay,\n    o: normalize_expression(consumeOption(options, \"opacity\")),\n    q: normalize_expression(consumeOption(options, \"quality\")),\n    r: radius,\n    t: named_transformation,\n    u: underlay,\n    w: normalize_expression(width),\n    x: normalize_expression(consumeOption(options, \"x\")),\n    y: normalize_expression(consumeOption(options, \"y\")),\n    z: normalize_expression(consumeOption(options, \"zoom\"))\n  };\n  SIMPLE_PARAMS.forEach(_ref5 => {\n    let [name, short] = _ref5;\n    let value = consumeOption(options, name);\n    if (value !== undefined) {\n      params[short] = value;\n    }\n  });\n  if (params.vc != null) {\n    params.vc = process_video_params(params.vc);\n  }\n  [\"so\", \"eo\", \"du\"].forEach(short => {\n    if (params[short] !== undefined) {\n      params[short] = norm_range_value(params[short]);\n    }\n  });\n  let variablesParam = consumeOption(options, \"variables\", []);\n  let variables = entries(options).filter(_ref6 => {\n    let [key, value] = _ref6;\n    return key.startsWith('$');\n  }).map(_ref7 => {\n    let [key, value] = _ref7;\n    delete options[key];\n    return `${key}_${normalize_expression(value)}`;\n  }).sort().concat(variablesParam.map(_ref8 => {\n    let [name, value] = _ref8;\n    return `${name}_${normalize_expression(value)}`;\n  })).join(',');\n  let transformations = entries(params).filter(_ref9 => {\n    let [key, value] = _ref9;\n    return utils.present(value);\n  }).map(_ref10 => {\n    let [key, value] = _ref10;\n    return key + '_' + value;\n  }).sort().join(',');\n  let raw_transformation = consumeOption(options, 'raw_transformation');\n  transformations = compact([ifValue, variables, transformations, raw_transformation]).join(\",\");\n  base_transformations.push(transformations);\n  transformations = base_transformations;\n  if (responsive_width) {\n    let responsive_width_transformation = config().responsive_width_transformation || DEFAULT_RESPONSIVE_WIDTH_TRANSFORMATION;\n    transformations.push(utils.generate_transformation_string(clone(responsive_width_transformation)));\n  }\n  if (String(width).startsWith(\"auto\") || responsive_width) {\n    options.responsive = true;\n  }\n  if (dpr === \"auto\") {\n    options.hidpi = true;\n  }\n  return filter(transformations, utils.present).join(\"/\");\n}\nfunction updateable_resource_params(options) {\n  let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (options.access_control != null) {\n    params.access_control = utils.jsonArrayParam(options.access_control);\n  }\n  if (options.auto_tagging != null) {\n    params.auto_tagging = options.auto_tagging;\n  }\n  if (options.background_removal != null) {\n    params.background_removal = options.background_removal;\n  }\n  if (options.categorization != null) {\n    params.categorization = options.categorization;\n  }\n  if (options.context != null) {\n    params.context = utils.encode_context(options.context);\n  }\n  if (options.metadata != null) {\n    params.metadata = utils.encode_context(options.metadata);\n  }\n  if (options.custom_coordinates != null) {\n    params.custom_coordinates = encodeDoubleArray(options.custom_coordinates);\n  }\n  if (options.detection != null) {\n    params.detection = options.detection;\n  }\n  if (options.face_coordinates != null) {\n    params.face_coordinates = encodeDoubleArray(options.face_coordinates);\n  }\n  if (options.headers != null) {\n    params.headers = utils.build_custom_headers(options.headers);\n  }\n  if (options.notification_url != null) {\n    params.notification_url = options.notification_url;\n  }\n  if (options.ocr != null) {\n    params.ocr = options.ocr;\n  }\n  if (options.raw_convert != null) {\n    params.raw_convert = options.raw_convert;\n  }\n  if (options.similarity_search != null) {\n    params.similarity_search = options.similarity_search;\n  }\n  if (options.tags != null) {\n    params.tags = toArray(options.tags).join(\",\");\n  }\n  if (options.quality_override != null) {\n    params.quality_override = options.quality_override;\n  }\n  if (options.asset_folder != null) {\n    params.asset_folder = options.asset_folder;\n  }\n  if (options.display_name != null) {\n    params.display_name = options.display_name;\n  }\n  if (options.unique_display_name != null) {\n    params.unique_display_name = options.unique_display_name;\n  }\n  return params;\n}\n\n/**\n * A list of keys used by the url() function.\n * @private\n */\nconst URL_KEYS = ['api_secret', 'auth_token', 'cdn_subdomain', 'cloud_name', 'cname', 'format', 'long_url_signature', 'private_cdn', 'resource_type', 'secure', 'secure_cdn_subdomain', 'secure_distribution', 'shorten', 'sign_url', 'ssl_detected', 'type', 'url_suffix', 'use_root_path', 'version'];\n\n/**\n * Create a new object with only URL parameters\n * @param {object} options The source object\n * @return {Object} An object containing only URL parameters\n */\n\nfunction extractUrlParams(options) {\n  return pickOnlyExistingValues(options, ...URL_KEYS);\n}\n\n/**\n * Create a new object with only transformation parameters\n * @param {object} options The source object\n * @return {Object} An object containing only transformation parameters\n */\n\nfunction extractTransformationParams(options) {\n  return pickOnlyExistingValues(options, ...TRANSFORMATION_PARAMS);\n}\n\n/**\n * Handle the format parameter for fetch urls\n * @private\n * @param options url and transformation options. This argument may be changed by the function!\n */\n\nfunction patchFetchFormat() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (options.type === \"fetch\") {\n    if (options.fetch_format == null) {\n      options.fetch_format = consumeOption(options, \"format\");\n    }\n  }\n}\nfunction url(public_id) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let signature, source_to_sign;\n  utils.patchFetchFormat(options);\n  let type = consumeOption(options, \"type\", null);\n  let transformation = utils.generate_transformation_string(options);\n  let resource_type = consumeOption(options, \"resource_type\", \"image\");\n  let version = consumeOption(options, \"version\");\n  let force_version = consumeOption(options, \"force_version\", config().force_version);\n  if (force_version == null) {\n    force_version = true;\n  }\n  let long_url_signature = !!consumeOption(options, \"long_url_signature\", config().long_url_signature);\n  let format = consumeOption(options, \"format\");\n  let cloud_name = consumeOption(options, \"cloud_name\", config().cloud_name);\n  if (!cloud_name) {\n    throw \"Unknown cloud_name\";\n  }\n  let private_cdn = consumeOption(options, \"private_cdn\", config().private_cdn);\n  let secure_distribution = consumeOption(options, \"secure_distribution\", config().secure_distribution);\n  let secure = consumeOption(options, \"secure\", null);\n  let ssl_detected = consumeOption(options, \"ssl_detected\", config().ssl_detected);\n  if (secure === null) {\n    secure = ssl_detected || config().secure;\n  }\n  let cdn_subdomain = consumeOption(options, \"cdn_subdomain\", config().cdn_subdomain);\n  let secure_cdn_subdomain = consumeOption(options, \"secure_cdn_subdomain\", config().secure_cdn_subdomain);\n  let cname = consumeOption(options, \"cname\", config().cname);\n  let shorten = consumeOption(options, \"shorten\", config().shorten);\n  let sign_url = consumeOption(options, \"sign_url\", config().sign_url);\n  let api_secret = consumeOption(options, \"api_secret\", config().api_secret);\n  let url_suffix = consumeOption(options, \"url_suffix\");\n  let use_root_path = consumeOption(options, \"use_root_path\", config().use_root_path);\n  let signature_algorithm = consumeOption(options, \"signature_algorithm\", config().signature_algorithm || DEFAULT_SIGNATURE_ALGORITHM);\n  if (long_url_signature) {\n    signature_algorithm = 'sha256';\n  }\n  let auth_token = consumeOption(options, \"auth_token\");\n  if (auth_token !== false) {\n    auth_token = exports.merge(config().auth_token, auth_token);\n  }\n  let preloaded = /^(image|raw)\\/([a-z0-9_]+)\\/v(\\d+)\\/([^#]+)$/.exec(public_id);\n  if (preloaded) {\n    resource_type = preloaded[1];\n    type = preloaded[2];\n    version = preloaded[3];\n    public_id = preloaded[4];\n  }\n  let original_source = public_id;\n  if (public_id == null) {\n    return original_source;\n  }\n  public_id = public_id.toString();\n  if (type === null && public_id.match(/^https?:\\//i)) {\n    return original_source;\n  }\n  [resource_type, type] = finalize_resource_type(resource_type, type, url_suffix, use_root_path, shorten);\n  [public_id, source_to_sign] = finalize_source(public_id, format, url_suffix);\n  if (version == null && force_version && source_to_sign.indexOf(\"/\") >= 0 && !source_to_sign.match(/^v[0-9]+/) && !source_to_sign.match(/^https?:\\//)) {\n    version = 1;\n  }\n  if (version != null) {\n    version = `v${version}`;\n  } else {\n    version = null;\n  }\n  transformation = transformation.replace(/([^:])\\/\\//g, '$1/');\n  if (sign_url && isEmpty(auth_token)) {\n    let to_sign = [transformation, source_to_sign].filter(function (part) {\n      return part != null && part !== '';\n    }).join('/');\n    try {\n      for (let i = 0; to_sign !== decodeURIComponent(to_sign) && i < 10; i++) {\n        to_sign = decodeURIComponent(to_sign);\n      }\n      // eslint-disable-next-line no-empty\n    } catch (error) {}\n    let hash = computeHash(to_sign + api_secret, signature_algorithm, 'base64');\n    signature = hash.replace(/\\//g, '_').replace(/\\+/g, '-').substring(0, long_url_signature ? 32 : 8);\n    signature = `s--${signature}--`;\n  }\n  let prefix = unsigned_url_prefix(public_id, cloud_name, private_cdn, cdn_subdomain, secure_cdn_subdomain, cname, secure, secure_distribution);\n  let resultUrl = [prefix, resource_type, type, signature, transformation, version, public_id].filter(function (part) {\n    return part != null && part !== '';\n  }).join('/').replace(/ /g, '%20');\n  if (sign_url && !isEmpty(auth_token)) {\n    auth_token.url = urlParse(resultUrl).path;\n    let token = generate_token(auth_token);\n    resultUrl += `?${token}`;\n  }\n  let urlAnalytics = ensureOption(options, 'urlAnalytics', false);\n  if (urlAnalytics === true) {\n    let {\n      sdkCode,\n      sdkSemver,\n      techVersion\n    } = getSDKVersions();\n    let sdkVersions = {\n      sdkCode: ensureOption(options, 'sdkCode', sdkCode),\n      sdkSemver: ensureOption(options, 'sdkSemver', sdkSemver),\n      techVersion: ensureOption(options, 'techVersion', techVersion)\n    };\n    let analyticsOptions = getAnalyticsOptions(Object.assign({}, options, sdkVersions));\n    let sdkAnalyticsSignature = getSDKAnalyticsSignature(analyticsOptions);\n\n    // url might already have a '?' query param\n    let appender = '?';\n    if (resultUrl.indexOf('?') >= 0) {\n      appender = '&';\n    }\n    resultUrl = `${resultUrl}${appender}_a=${sdkAnalyticsSignature}`;\n  }\n  return resultUrl;\n}\nfunction video_url(public_id, options) {\n  options = extend({\n    resource_type: 'video'\n  }, options);\n  return utils.url(public_id, options);\n}\nfunction finalize_source(source, format, url_suffix) {\n  let source_to_sign;\n  source = source.replace(/([^:])\\/\\//g, '$1/');\n  if (source.match(/^https?:\\//i)) {\n    source = smart_escape(source);\n    source_to_sign = source;\n  } else {\n    source = encodeURIComponent(decodeURIComponent(source)).replace(/%3A/g, \":\").replace(/%2F/g, \"/\");\n    source_to_sign = source;\n    if (url_suffix) {\n      if (url_suffix.match(/[\\.\\/]/)) {\n        throw new Error('url_suffix should not include . or /');\n      }\n      source = source + '/' + url_suffix;\n    }\n    if (format != null) {\n      source = source + '.' + format;\n      source_to_sign = source_to_sign + '.' + format;\n    }\n  }\n  return [source, source_to_sign];\n}\nfunction video_thumbnail_url(public_id, options) {\n  options = extend({}, DEFAULT_POSTER_OPTIONS, options);\n  return utils.url(public_id, options);\n}\nfunction finalize_resource_type(resource_type, type, url_suffix, use_root_path, shorten) {\n  if (type == null) {\n    type = 'upload';\n  }\n  if (url_suffix != null) {\n    if (resource_type === 'image' && type === 'upload') {\n      resource_type = \"images\";\n      type = null;\n    } else if (resource_type === 'image' && type === 'private') {\n      resource_type = 'private_images';\n      type = null;\n    } else if (resource_type === 'image' && type === 'authenticated') {\n      resource_type = 'authenticated_images';\n      type = null;\n    } else if (resource_type === 'raw' && type === 'upload') {\n      resource_type = 'files';\n      type = null;\n    } else if (resource_type === 'video' && type === 'upload') {\n      resource_type = 'videos';\n      type = null;\n    } else {\n      throw new Error(\"URL Suffix only supported for image/upload, image/private, image/authenticated, video/upload and raw/upload\");\n    }\n  }\n  if (use_root_path) {\n    if (resource_type === 'image' && type === 'upload' || resource_type === 'images' && type == null) {\n      resource_type = null;\n      type = null;\n    } else {\n      throw new Error(\"Root path only supported for image/upload\");\n    }\n  }\n  if (shorten && resource_type === 'image' && type === 'upload') {\n    resource_type = 'iu';\n    type = null;\n  }\n  return [resource_type, type];\n}\n// cdn_subdomain and secure_cdn_subdomain\n// 1) Customers in shared distribution (e.g. res.cloudinary.com)\n//    if cdn_domain is true uses res-[1-5].cloudinary.com for both http and https.\n//    Setting secure_cdn_subdomain to false disables this for https.\n// 2) Customers with private cdn\n//    if cdn_domain is true uses cloudname-res-[1-5].cloudinary.com for http\n//    if secure_cdn_domain is true uses cloudname-res-[1-5].cloudinary.com for https\n//      (please contact support if you require this)\n// 3) Customers with cname\n//    if cdn_domain is true uses a[1-5].cname for http.\n//    For https, uses the same naming scheme as 1 for shared distribution and as 2 for private distribution.\n\nfunction unsigned_url_prefix(source, cloud_name, private_cdn, cdn_subdomain, secure_cdn_subdomain, cname, secure, secure_distribution) {\n  let prefix;\n  if (cloud_name.indexOf(\"/\") === 0) {\n    return '/res' + cloud_name;\n  }\n  let shared_domain = !private_cdn;\n  if (secure) {\n    if (secure_distribution == null || secure_distribution === exports.OLD_AKAMAI_SHARED_CDN) {\n      secure_distribution = private_cdn ? cloud_name + \"-res.cloudinary.com\" : exports.SHARED_CDN;\n    }\n    if (shared_domain == null) {\n      shared_domain = secure_distribution === exports.SHARED_CDN;\n    }\n    if (secure_cdn_subdomain == null && shared_domain) {\n      secure_cdn_subdomain = cdn_subdomain;\n    }\n    if (secure_cdn_subdomain) {\n      secure_distribution = secure_distribution.replace('res.cloudinary.com', 'res-' + (crc32(source) % 5 + 1 + '.cloudinary.com'));\n    }\n    prefix = 'https://' + secure_distribution;\n  } else if (cname) {\n    let subdomain = cdn_subdomain ? 'a' + (crc32(source) % 5 + 1) + '.' : '';\n    prefix = 'http://' + subdomain + cname;\n  } else {\n    let cdn_part = private_cdn ? cloud_name + '-' : '';\n    let subdomain_part = cdn_subdomain ? '-' + (crc32(source) % 5 + 1) : '';\n    let host = [cdn_part, 'res', subdomain_part, '.cloudinary.com'].join('');\n    prefix = 'http://' + host;\n  }\n  if (shared_domain) {\n    prefix += '/' + cloud_name;\n  }\n  return prefix;\n}\nfunction base_api_url() {\n  let path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let cloudinary = ensureOption(options, \"upload_prefix\", UPLOAD_PREFIX);\n  let cloud_name = ensureOption(options, \"cloud_name\");\n  let encode_path = unencoded_path => encodeURIComponent(unencoded_path).replace(\"'\", '%27');\n  let encoded_path = Array.isArray(path) ? path.map(encode_path) : encode_path(path);\n  return [cloudinary, \"v1_1\", cloud_name].concat(encoded_path).join(\"/\");\n}\nfunction api_url() {\n  let action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'upload';\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let resource_type = options.resource_type || \"image\";\n  return base_api_url([resource_type, action], options);\n}\nfunction random_public_id() {\n  return crypto.randomBytes(12).toString('base64').replace(/[^a-z0-9]/g, \"\");\n}\nfunction signed_preloaded_image(result) {\n  return `${result.resource_type}/upload/v${result.version}/${filter([result.public_id, result.format], utils.present).join(\".\")}#${result.signature}`;\n}\nfunction api_sign_request(params_to_sign, api_secret) {\n  let to_sign = entries(params_to_sign).filter(_ref11 => {\n    let [k, v] = _ref11;\n    return utils.present(v);\n  }).map(_ref12 => {\n    let [k, v] = _ref12;\n    return `${k}=${toArray(v).join(\",\")}`;\n  }).sort().join(\"&\");\n  return computeHash(to_sign + api_secret, config().signature_algorithm || DEFAULT_SIGNATURE_ALGORITHM, 'hex');\n}\n\n/**\n * Computes hash from input string using specified algorithm.\n * @private\n * @param {string} input string which to compute hash from\n * @param {string} signature_algorithm algorithm to use for computing hash\n * @param {string} encoding type of encoding\n * @return {string} computed hash value\n */\nfunction computeHash(input, signature_algorithm, encoding) {\n  if (!SUPPORTED_SIGNATURE_ALGORITHMS.includes(signature_algorithm)) {\n    throw new Error(`Signature algorithm ${signature_algorithm} is not supported. Supported algorithms: ${SUPPORTED_SIGNATURE_ALGORITHMS.join(', ')}`);\n  }\n  let hash = crypto.createHash(signature_algorithm);\n  hash.update(utf8_encode(input), 'binary');\n  return hash.digest(encoding);\n}\nfunction clear_blank(hash) {\n  let filtered_hash = {};\n  entries(hash).filter(_ref13 => {\n    let [k, v] = _ref13;\n    return utils.present(v);\n  }).forEach(_ref14 => {\n    let [k, v] = _ref14;\n    filtered_hash[k] = v.filter ? v.filter(x => x) : v;\n  });\n  return filtered_hash;\n}\nfunction merge(hash1, hash2) {\n  return {\n    ...hash1,\n    ...hash2\n  };\n}\nfunction sign_request(params) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let apiKey = ensureOption(options, 'api_key');\n  let apiSecret = ensureOption(options, 'api_secret');\n  params = exports.clear_blank(params);\n  params.signature = exports.api_sign_request(params, apiSecret);\n  params.api_key = apiKey;\n  return params;\n}\nfunction webhook_signature(data, timestamp) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  ensurePresenceOf({\n    data,\n    timestamp\n  });\n  let api_secret = ensureOption(options, 'api_secret');\n  let signature_algorithm = ensureOption(options, 'signature_algorithm', DEFAULT_SIGNATURE_ALGORITHM);\n  return computeHash(data + timestamp + api_secret, signature_algorithm, 'hex');\n}\n\n/**\n * Verifies the authenticity of a notification signature\n *\n * @param {string} body JSON of the request's body\n * @param {number} timestamp Unix timestamp in seconds. Can be retrieved from the X-Cld-Timestamp header\n * @param {string} signature Actual signature. Can be retrieved from the X-Cld-Signature header\n * @param {number} [valid_for=7200] The desired time in seconds for considering the request valid\n *\n * @return {boolean}\n */\nfunction verifyNotificationSignature(body, timestamp, signature) {\n  let valid_for = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 7200;\n  // verify that signature is valid for the given timestamp\n  if (timestamp < Math.round(Date.now() / 1000) - valid_for) {\n    return false;\n  }\n  const payload_hash = utils.webhook_signature(body, timestamp, {\n    api_secret: config().api_secret,\n    signature_algorithm: config().signature_algorithm\n  });\n  return signature === payload_hash;\n}\nfunction process_request_params(params, options) {\n  if (options.unsigned != null && options.unsigned) {\n    params = exports.clear_blank(params);\n    delete params.timestamp;\n  } else if (options.oauth_token || config().oauth_token) {\n    params = exports.clear_blank(params);\n  } else if (options.signature) {\n    params = exports.clear_blank(options);\n  } else {\n    params = exports.sign_request(params, options);\n  }\n  return params;\n}\nfunction private_download_url(public_id, format) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let params = exports.sign_request({\n    timestamp: options.timestamp || exports.timestamp(),\n    public_id: public_id,\n    format: format,\n    type: options.type,\n    attachment: options.attachment,\n    expires_at: options.expires_at\n  }, options);\n  return exports.api_url(\"download\", options) + \"?\" + querystring.stringify(params);\n}\n\n/**\n * Utility method that uses the deprecated ZIP download API.\n * @deprecated Replaced by {download_zip_url} that uses the more advanced and robust archive generation and download API\n */\n\nfunction zip_download_url(tag) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let params = exports.sign_request({\n    timestamp: options.timestamp || exports.timestamp(),\n    tag: tag,\n    transformation: utils.generate_transformation_string(options)\n  }, options);\n  return exports.api_url(\"download_tag.zip\", options) + \"?\" + hashToQuery(params);\n}\n\n/**\n * The returned url should allow downloading the backedup asset based on the\n * version and asset id\n * asset and version id are returned with resource(<PUBLIC_ID1>, { versions: true })\n * @param asset_id\n * @param version_id\n * @param options\n * @returns {string }\n */\nfunction download_backedup_asset(asset_id, version_id) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let params = exports.sign_request({\n    timestamp: options.timestamp || exports.timestamp(),\n    asset_id: asset_id,\n    version_id: version_id\n  }, options);\n  return exports.base_api_url(['download_backup'], options) + \"?\" + hashToQuery(params);\n}\n\n/**\n * Utility method to create a signed URL for specified resources.\n * @param action\n * @param params\n * @param options\n */\nfunction api_download_url(action, params, options) {\n  const download_params = {\n    ...params,\n    mode: \"download\"\n  };\n  let cloudinary_params = exports.sign_request(download_params, options);\n  return exports.api_url(action, options) + \"?\" + hashToQuery(cloudinary_params);\n}\n\n/**\n * Returns a URL that when invokes creates an archive and returns it.\n * @param {object} options\n * @param {string} [options.resource_type=\"image\"] The resource type of files to include in the archive.\n *   Must be one of :image | :video | :raw\n * @param {string} [options.type=\"upload\"] The specific file type of resources: :upload|:private|:authenticated\n * @param {string|Array} [options.tags] list of tags to include in the archive\n * @param {string|Array<string>} [options.public_ids] list of public_ids to include in the archive\n * @param {string|Array<string>} [options.prefixes]  list of prefixes of public IDs (e.g., folders).\n * @param {string|Array<string>} [options.fully_qualified_public_ids] list of fully qualified public_ids to include\n *   in the archive.\n * @param {string|Array<string>} [options.transformations]  list of transformations.\n *   The derived images of the given transformations are included in the archive. Using the string representation of\n *   multiple chained transformations as we use for the 'eager' upload parameter.\n * @param {string} [options.mode=\"create\"] return the generated archive file or to store it as a raw resource and\n *   return a JSON with URLs for accessing the archive. Possible values: :download, :create\n * @param {string} [options.target_format=\"zip\"]\n * @param {string} [options.target_public_id]  public ID of the generated raw resource.\n *   Relevant only for the create mode. If not specified, random public ID is generated.\n * @param {boolean} [options.flatten_folders=false] If true, flatten public IDs with folders to be in the root\n *   of the archive. Add numeric counter to the file name in case of a name conflict.\n * @param {boolean} [options.flatten_transformations=false] If true, and multiple transformations are given,\n *   flatten the folder structure of derived images and store the transformation details on the file name instead.\n * @param {boolean} [options.use_original_filename] Use the original file name of included images\n *   (if available) instead of the public ID.\n * @param {boolean} [options.async=false] If true, return immediately and perform archive creation in the background.\n *   Relevant only for the create mode.\n * @param {string} [options.notification_url] URL to send an HTTP post request (webhook) to when the\n *   archive creation is completed.\n * @param {string|Array<string>} [options.target_tags=] Allows assigning one or more tags to the generated archive file\n *   (for later housekeeping via the admin API).\n * @param {string} [options.keep_derived=false] keep the derived images used for generating the archive\n * @return {String} archive url\n */\nfunction download_archive_url() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const params = exports.archive_params(merge(options, {\n    mode: \"download\"\n  }));\n  return api_download_url(\"generate_archive\", params, options);\n}\n\n/**\n * Returns a URL that when invokes creates an zip archive and returns it.\n * @see download_archive_url\n */\n\nfunction download_zip_url() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return exports.download_archive_url(merge(options, {\n    target_format: \"zip\"\n  }));\n}\n\n/**\n * Creates and returns a URL that when invoked creates an archive of a folder\n * @param {string} folder_path Full path (from the root) of the folder to download\n * @param {object} options Additional options\n * @returns {string} Url for downloading an archive of a folder\n */\nfunction download_folder(folder_path) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options.resource_type = options.resource_type || \"all\";\n  options.prefixes = folder_path;\n  let cloudinary_params = exports.sign_request(exports.archive_params(merge(options, {\n    mode: \"download\"\n  })), options);\n  return exports.api_url(\"generate_archive\", options) + \"?\" + hashToQuery(cloudinary_params);\n}\n\n/**\n * Render the key/value pair as an HTML tag attribute\n * @private\n * @param {string} key\n * @param {string|boolean|number} [value]\n * @return {string} A string representing the HTML attribute\n */\nfunction join_pair(key, value) {\n  if (!value) {\n    return void 0;\n  }\n  return value === true ? key : key + \"='\" + value + \"'\";\n}\n\n/**\n * If the given value is a string, replaces single or double quotes with character entities\n * @private\n * @param {*} value The string to encode quotes in\n * @return {*} Encoded string or original value if not a string\n */\nfunction escapeQuotes(value) {\n  return isString(value) ? value.replace(/\\\"/g, '&#34;').replace(/\\'/g, '&#39;') : value;\n}\n\n/**\n *\n * @param attrs\n * @return {*}\n */\nexports.html_attrs = function html_attrs(attrs) {\n  return filter(map(attrs, function (value, key) {\n    return join_pair(key, escapeQuotes(value));\n  })).sort().join(\" \");\n};\nconst CLOUDINARY_JS_CONFIG_PARAMS = ['api_key', 'cloud_name', 'private_cdn', 'secure_distribution', 'cdn_subdomain'];\nfunction cloudinary_js_config() {\n  let params = pickOnlyExistingValues(config(), ...CLOUDINARY_JS_CONFIG_PARAMS);\n  return `<script type='text/javascript'>\\n$.cloudinary.config(${JSON.stringify(params)});\\n</script>`;\n}\nfunction v1_result_adapter(callback) {\n  if (callback == null) {\n    return undefined;\n  }\n  return function (result) {\n    if (result.error != null) {\n      return callback(result.error);\n    }\n    return callback(void 0, result);\n  };\n}\nfunction v1_adapter(name, num_pass_args, v1) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    let pass_args = take(args, num_pass_args);\n    let options = args[num_pass_args];\n    let callback = args[num_pass_args + 1];\n    if (callback == null && isFunction(options)) {\n      callback = options;\n      options = {};\n    }\n    callback = v1_result_adapter(callback);\n    args = pass_args.concat([callback, options]);\n    return v1[name].apply(this, args);\n  };\n}\nfunction v1_adapters(exports, v1, mapping) {\n  return Object.keys(mapping).map(name => {\n    let num_pass_args = mapping[name];\n    exports[name] = v1_adapter(name, num_pass_args, v1);\n    return exports[name];\n  });\n}\nfunction as_safe_bool(value) {\n  if (value == null) {\n    return void 0;\n  }\n  if (value === true || value === 'true' || value === '1') {\n    value = 1;\n  }\n  if (value === false || value === 'false' || value === '0') {\n    value = 0;\n  }\n  return value;\n}\nconst NUMBER_PATTERN = \"([0-9]*)\\\\.([0-9]+)|([0-9]+)\";\nconst OFFSET_ANY_PATTERN = `(${NUMBER_PATTERN})([%pP])?`;\nconst RANGE_VALUE_RE = RegExp(`^${OFFSET_ANY_PATTERN}$`);\nconst OFFSET_ANY_PATTERN_RE = RegExp(`(${OFFSET_ANY_PATTERN})\\\\.\\\\.(${OFFSET_ANY_PATTERN})`);\n\n// Split a range into the start and end values\nfunction split_range(range) {\n  // :nodoc:\n  switch (range.constructor) {\n    case String:\n      if (!OFFSET_ANY_PATTERN_RE.test(range)) {\n        return range;\n      }\n      return range.split(\"..\");\n    case Array:\n      return [first(range), last(range)];\n    default:\n      return [null, null];\n  }\n}\nfunction norm_range_value(value) {\n  // :nodoc:\n  let offset = String(value).match(RANGE_VALUE_RE);\n  if (offset) {\n    let modifier = offset[5] ? 'p' : '';\n    value = `${offset[1] || offset[4]}${modifier}`;\n  }\n  return value;\n}\n\n/**\n * A video codec parameter can be either a String or a Hash.\n * @param {Object} param <code>vc_<codec>[ : <profile> : [<level>]]</code>\n *                       or <code>{ codec: 'h264', profile: 'basic', level: '3.1' }</code>\n * @return {String} <code><codec> : <profile> : [<level>]]</code> if a Hash was provided\n *                   or the param if a String was provided.\n *                   Returns null if param is not a Hash or String\n */\nfunction process_video_params(param) {\n  switch (param.constructor) {\n    case Object:\n      {\n        let video = \"\";\n        if ('codec' in param) {\n          video = param.codec;\n          if ('profile' in param) {\n            video += \":\" + param.profile;\n            if ('level' in param) {\n              video += \":\" + param.level;\n            }\n          }\n        }\n        return video;\n      }\n    case String:\n      return param;\n    default:\n      return null;\n  }\n}\n/**\n * Returns a Hash of parameters used to create an archive\n * @private\n * @param {object} options\n * @return {object} Archive API parameters\n */\n\nfunction archive_params() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    allow_missing: exports.as_safe_bool(options.allow_missing),\n    async: exports.as_safe_bool(options.async),\n    expires_at: options.expires_at,\n    flatten_folders: exports.as_safe_bool(options.flatten_folders),\n    flatten_transformations: exports.as_safe_bool(options.flatten_transformations),\n    keep_derived: exports.as_safe_bool(options.keep_derived),\n    mode: options.mode,\n    notification_url: options.notification_url,\n    prefixes: options.prefixes && toArray(options.prefixes),\n    fully_qualified_public_ids: options.fully_qualified_public_ids && toArray(options.fully_qualified_public_ids),\n    public_ids: options.public_ids && toArray(options.public_ids),\n    skip_transformation_name: exports.as_safe_bool(options.skip_transformation_name),\n    tags: options.tags && toArray(options.tags),\n    target_format: options.target_format,\n    target_public_id: options.target_public_id,\n    target_tags: options.target_tags && toArray(options.target_tags),\n    timestamp: options.timestamp || exports.timestamp(),\n    transformations: utils.build_eager(options.transformations),\n    type: options.type,\n    use_original_filename: exports.as_safe_bool(options.use_original_filename)\n  };\n}\nexports.create_source_tag = function create_source_tag(src, source_type) {\n  let codecs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let video_type = source_type === 'ogv' ? 'ogg' : source_type;\n  let mime_type = `video/${video_type}`;\n  if (!isEmpty(codecs)) {\n    let codecs_str = isArray(codecs) ? codecs.join(', ') : codecs;\n    mime_type += `; codecs=${codecs_str}`;\n  }\n  return `<source ${utils.html_attrs({\n    src,\n    type: mime_type\n  })}>`;\n};\nfunction build_explicit_api_params(public_id) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return [exports.build_upload_params(extend({}, {\n    public_id\n  }, options))];\n}\nfunction generate_responsive_breakpoints_string(breakpoints) {\n  if (breakpoints == null) {\n    return null;\n  }\n  breakpoints = clone(breakpoints);\n  if (!isArray(breakpoints)) {\n    breakpoints = [breakpoints];\n  }\n  for (let j = 0; j < breakpoints.length; j++) {\n    let breakpoint_settings = breakpoints[j];\n    if (breakpoint_settings != null) {\n      if (breakpoint_settings.transformation) {\n        breakpoint_settings.transformation = utils.generate_transformation_string(clone(breakpoint_settings.transformation));\n      }\n    }\n  }\n  return JSON.stringify(breakpoints);\n}\nfunction build_streaming_profiles_param() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let params = pickOnlyExistingValues(options, \"display_name\", \"representations\");\n  if (isArray(params.representations)) {\n    params.representations = JSON.stringify(params.representations.map(r => ({\n      transformation: utils.generate_transformation_string(r.transformation)\n    })));\n  }\n  return params;\n}\nfunction hashToParameters(hash) {\n  return entries(hash).reduce((parameters, _ref15) => {\n    let [key, value] = _ref15;\n    if (isArray(value)) {\n      key = key.endsWith('[]') ? key : key + '[]';\n      const items = value.map(v => [key, v]);\n      parameters = parameters.concat(items);\n    } else {\n      parameters.push([key, value]);\n    }\n    return parameters;\n  }, []);\n}\n\n/**\n * Convert a hash of values to a URI query string.\n * Array values are spread as individual parameters.\n * @param {object} hash Key-value parameters\n * @return {string} A URI query string.\n */\nfunction hashToQuery(hash) {\n  return hashToParameters(hash).map(_ref16 => {\n    let [key, value] = _ref16;\n    return `${querystring.escape(key)}=${querystring.escape(value)}`;\n  }).join('&');\n}\n\n/**\n * Verify that the parameter `value` is defined and it's string value is not zero.\n * <br>This function should not be confused with `isEmpty()`.\n * @private\n * @param {string|number} value The value to check.\n * @return {boolean} True if the value is defined and not empty.\n */\n\nfunction present(value) {\n  return value != null && (\"\" + value).length > 0;\n}\n\n/**\n * Returns a new object with key values from source based on the keys.\n * `null` or `undefined` values are not copied.\n * @private\n * @param {object} source The object to pick values from.\n * @param {...string} keys One or more keys to copy from source.\n * @return {object} A new object with the required keys and values.\n */\n\nfunction pickOnlyExistingValues(source) {\n  let result = {};\n  if (source) {\n    for (var _len2 = arguments.length, keys = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      keys[_key2 - 1] = arguments[_key2];\n    }\n    keys.forEach(key => {\n      if (source[key] != null) {\n        result[key] = source[key];\n      }\n    });\n  }\n  return result;\n}\n\n/**\n * Returns a JSON array as String.\n * Yields the array before it is converted to JSON format\n * @private\n * @param {object|String|Array<object>} data\n * @param {function(*):*} [modifier] called with the array before the array is stringified\n * @return {String|null} a JSON array string or `null` if data is `null`\n */\n\nfunction jsonArrayParam(data, modifier) {\n  if (!data) {\n    return null;\n  }\n  if (isString(data)) {\n    data = JSON.parse(data);\n  }\n  if (!isArray(data)) {\n    data = [data];\n  }\n  if (isFunction(modifier)) {\n    data = modifier(data);\n  }\n  return JSON.stringify(data);\n}\nfunction optionalRequire(moduleName) {\n  let module;\n  try {\n    module = require(moduleName);\n    return module;\n  } catch (e) {\n    if (e.code === \"MODULE_NOT_FOUND\") {\n      return null;\n    }\n    throw e;\n  }\n}\n\n/**\n * Empty function - do nothing\n *\n */\nexports.NOP = function () {};\nexports.generate_auth_token = generate_auth_token;\nexports.getUserAgent = getUserAgent;\nexports.build_upload_params = build_upload_params;\nexports.build_multi_and_sprite_params = build_multi_and_sprite_params;\nexports.api_download_url = api_download_url;\nexports.timestamp = () => Math.floor(new Date().getTime() / 1000);\nexports.option_consume = consumeOption; // for backwards compatibility\nexports.build_array = toArray; // for backwards compatibility\nexports.encode_double_array = encodeDoubleArray;\nexports.encode_key_value = encode_key_value;\nexports.encode_context = encode_context;\nexports.build_eager = build_eager;\nexports.build_custom_headers = build_custom_headers;\nexports.generate_transformation_string = generate_transformation_string;\nexports.updateable_resource_params = updateable_resource_params;\nexports.extractUrlParams = extractUrlParams;\nexports.extractTransformationParams = extractTransformationParams;\nexports.patchFetchFormat = patchFetchFormat;\nexports.url = url;\nexports.video_url = video_url;\nexports.video_thumbnail_url = video_thumbnail_url;\nexports.api_url = api_url;\nexports.random_public_id = random_public_id;\nexports.signed_preloaded_image = signed_preloaded_image;\nexports.api_sign_request = api_sign_request;\nexports.clear_blank = clear_blank;\nexports.merge = merge;\nexports.sign_request = sign_request;\nexports.webhook_signature = webhook_signature;\nexports.verifyNotificationSignature = verifyNotificationSignature;\nexports.process_request_params = process_request_params;\nexports.private_download_url = private_download_url;\nexports.zip_download_url = zip_download_url;\nexports.download_archive_url = download_archive_url;\nexports.download_zip_url = download_zip_url;\nexports.cloudinary_js_config = cloudinary_js_config;\nexports.v1_adapters = v1_adapters;\nexports.as_safe_bool = as_safe_bool;\nexports.archive_params = archive_params;\nexports.build_explicit_api_params = build_explicit_api_params;\nexports.generate_responsive_breakpoints_string = generate_responsive_breakpoints_string;\nexports.build_streaming_profiles_param = build_streaming_profiles_param;\nexports.hashToParameters = hashToParameters;\nexports.present = present;\nexports.only = pickOnlyExistingValues; // for backwards compatibility\nexports.pickOnlyExistingValues = pickOnlyExistingValues;\nexports.jsonArrayParam = jsonArrayParam;\nexports.download_folder = download_folder;\nexports.base_api_url = base_api_url;\nexports.download_backedup_asset = download_backedup_asset;\nexports.optionalRequire = optionalRequire;\n\n// was exported before, so kept for backwards compatibility\nexports.DEFAULT_POSTER_OPTIONS = DEFAULT_POSTER_OPTIONS;\nexports.DEFAULT_VIDEO_SOURCE_TYPES = DEFAULT_VIDEO_SOURCE_TYPES;\nObject.assign(module.exports, {\n  normalize_expression,\n  at,\n  clone,\n  extend,\n  filter,\n  includes,\n  isArray,\n  isEmpty,\n  isNumber,\n  isObject,\n  isRemoteUrl,\n  isString,\n  isUndefined,\n  keys: source => Object.keys(source),\n  ensurePresenceOf\n});","map":{"version":3,"names":["crypto","require","querystring","urlParse","parse","compact","first","isFunction","isPlainObject","last","map","take","at","clone","extend","filter","includes","isArray","isEmpty","isNumber","isObject","isString","isUndefined","smart_escape","consumeOption","toArray","base64EncodeURL","encodeDoubleArray","config","generate_token","utf8_encode","crc32","ensurePresenceOf","ensureOption","defaults","entries","isRemoteUrl","getSDKVersions","getAnalyticsOptions","getSDKAnalyticsSignature","Util","exports","module","utils","VERSION","version","error","generate_auth_token","options","token_options","Object","assign","auth_token","CF_SHARED_CDN","OLD_AKAMAI_SHARED_CDN","AKAMAI_SHARED_CDN","SHARED_CDN","USER_AGENT","process","versions","node","userPlatform","getUserAgent","DEFAULT_RESPONSIVE_WIDTH_TRANSFORMATION","DEFAULT_POSTER_OPTIONS","DEFAULT_VIDEO_SOURCE_TYPES","CONDITIONAL_OPERATORS","PREDEFINED_VARS","LAYER_KEYWORD_PARAMS","TRANSFORMATION_PARAMS","SIMPLE_PARAMS","UPLOAD_PREFIX","SUPPORTED_SIGNATURE_ALGORITHMS","DEFAULT_SIGNATURE_ALGORITHM","textStyle","layer","keywords","style","text_style","keys","forEach","attr","default_value","attr_value","push","split","pop","hasOwnProperty","font_size","font_family","unshift","join","normalize_expression","expression","length","match","operators","operatorsPattern","operatorsReplaceRE","RegExp","replace","predefinedVarsPattern","v","userVariablePattern","variablesReplaceRE","process_custom_function","customFunction","function_type","encodedSource","source","process_custom_pre_function","customPreFunction","result","process_if","ifValue","process_layer","resource_type","url","public_id","format","type","text","components","noPublicId","noStyle","re","start","textSource","decodeURIComponent","res","exec","slice","index","encodeURIComponent","test","substr","process_radius","radius","Error","findIndex","x","build_multi_and_sprite_params","tagOrOptions","tag","urls","transformation","generate_transformation_string","fetch_format","timestamp","async","notification_url","build_upload_params","params","access_mode","allowed_formats","asset_folder","as_safe_bool","backup","callback","cinemagraph_analysis","colors","display_name","discard_original_filename","eager","build_eager","eager_async","eager_notification_url","eval","exif","faces","folder","filename_override","image_metadata","media_metadata","invalidate","moderation","overwrite","phash","proxy","public_id_prefix","quality_analysis","responsive_breakpoints","generate_responsive_breakpoints_string","return_delete_token","unique_filename","upload_preset","use_filename","use_filename_as_display_name","quality_override","accessibility_analysis","use_asset_folder_as_public_id_prefix","updateable_resource_params","encode_key_value","arg","k","escapeMetadataValue","value","toString","encode_context","metadataObj","key","values","innerVal","transformations","transformationString","build_custom_headers","headers","t","present","responsive_width","width","height","size","has_layer","overlay","underlay","crop","angle","no_html_sizes","indexOf","parseFloat","background","color","base_transformations","named_transformation","some","tr","effect","border","flags","dpr","offset","start_offset","end_offset","split_range","custom_function","custom_pre_function","fps","a","ar","b","bo","c","co","e","fl","fn","h","ki","l","o","q","r","u","w","y","z","name","short","undefined","vc","process_video_params","norm_range_value","variablesParam","variables","startsWith","sort","concat","raw_transformation","responsive_width_transformation","String","responsive","hidpi","access_control","jsonArrayParam","auto_tagging","background_removal","categorization","context","metadata","custom_coordinates","detection","face_coordinates","ocr","raw_convert","similarity_search","tags","unique_display_name","URL_KEYS","extractUrlParams","pickOnlyExistingValues","extractTransformationParams","patchFetchFormat","signature","source_to_sign","force_version","long_url_signature","cloud_name","private_cdn","secure_distribution","secure","ssl_detected","cdn_subdomain","secure_cdn_subdomain","cname","shorten","sign_url","api_secret","url_suffix","use_root_path","signature_algorithm","merge","preloaded","original_source","finalize_resource_type","finalize_source","to_sign","part","i","hash","computeHash","substring","prefix","unsigned_url_prefix","resultUrl","path","token","urlAnalytics","sdkCode","sdkSemver","techVersion","sdkVersions","analyticsOptions","sdkAnalyticsSignature","appender","video_url","video_thumbnail_url","shared_domain","subdomain","cdn_part","subdomain_part","host","base_api_url","cloudinary","encode_path","unencoded_path","encoded_path","Array","api_url","action","random_public_id","randomBytes","signed_preloaded_image","api_sign_request","params_to_sign","input","encoding","createHash","update","digest","clear_blank","filtered_hash","hash1","hash2","sign_request","apiKey","apiSecret","api_key","webhook_signature","data","verifyNotificationSignature","body","valid_for","Math","round","Date","now","payload_hash","process_request_params","unsigned","oauth_token","private_download_url","attachment","expires_at","stringify","zip_download_url","hashToQuery","download_backedup_asset","asset_id","version_id","api_download_url","download_params","mode","cloudinary_params","download_archive_url","archive_params","download_zip_url","target_format","download_folder","folder_path","prefixes","join_pair","escapeQuotes","html_attrs","attrs","CLOUDINARY_JS_CONFIG_PARAMS","cloudinary_js_config","JSON","v1_result_adapter","v1_adapter","num_pass_args","v1","args","pass_args","apply","v1_adapters","mapping","NUMBER_PATTERN","OFFSET_ANY_PATTERN","RANGE_VALUE_RE","OFFSET_ANY_PATTERN_RE","range","constructor","modifier","param","video","codec","profile","level","allow_missing","flatten_folders","flatten_transformations","keep_derived","fully_qualified_public_ids","public_ids","skip_transformation_name","target_public_id","target_tags","use_original_filename","create_source_tag","src","source_type","codecs","video_type","mime_type","codecs_str","build_explicit_api_params","breakpoints","j","breakpoint_settings","build_streaming_profiles_param","representations","hashToParameters","reduce","parameters","endsWith","items","escape","optionalRequire","moduleName","code","NOP","floor","getTime","option_consume","build_array","encode_double_array","only"],"sources":["D:/MernStack-Tour-Management-main/tour-management/frontend/node_modules/cloudinary/lib/utils/index.js"],"sourcesContent":["/**\n * Utilities\n * @module utils\n * @borrows module:auth_token as generate_auth_token\n */\n\nconst crypto = require(\"crypto\");\nconst querystring = require(\"querystring\");\nconst urlParse = require(\"url\").parse;\n\n// Functions used internally\nconst compact = require(\"lodash/compact\");\nconst first = require(\"lodash/first\");\nconst isFunction = require(\"lodash/isFunction\");\nconst isPlainObject = require(\"lodash/isPlainObject\");\nconst last = require(\"lodash/last\");\nconst map = require(\"lodash/map\");\nconst take = require(\"lodash/take\");\nconst at = require(\"lodash/at\");\n\n// Exposed by the module\nconst clone = require(\"lodash/clone\");\nconst extend = require(\"lodash/extend\");\nconst filter = require(\"lodash/filter\");\nconst includes = require(\"lodash/includes\");\nconst isArray = require(\"lodash/isArray\");\nconst isEmpty = require(\"lodash/isEmpty\");\nconst isNumber = require(\"lodash/isNumber\");\nconst isObject = require(\"lodash/isObject\");\nconst isString = require(\"lodash/isString\");\nconst isUndefined = require(\"lodash/isUndefined\");\n\nconst smart_escape = require(\"./encoding/smart_escape\");\nconst consumeOption = require('./parsing/consumeOption');\nconst toArray = require('./parsing/toArray');\nlet { base64EncodeURL } = require('./encoding/base64EncodeURL');\nconst encodeDoubleArray = require('./encoding/encodeDoubleArray');\n\nconst config = require(\"../config\");\nconst generate_token = require(\"../auth_token\");\nconst utf8_encode = require('./utf8_encode');\nconst crc32 = require('./crc32');\nconst ensurePresenceOf = require('./ensurePresenceOf');\nconst ensureOption = require('./ensureOption').defaults(config());\nconst entries = require('./entries');\nconst isRemoteUrl = require('./isRemoteUrl');\nconst getSDKVersions = require('./encoding/sdkAnalytics/getSDKVersions');\nconst {getAnalyticsOptions, getSDKAnalyticsSignature} = require('cloudinary-core').Util;\n\nexports = module.exports;\nconst utils = module.exports;\n\ntry {\n  // eslint-disable-next-line global-require\n  utils.VERSION = require('../../package.json').version;\n} catch (error) {\n  utils.VERSION = '';\n}\n\nfunction generate_auth_token(options) {\n  let token_options = Object.assign({}, config().auth_token, options);\n  return generate_token(token_options);\n}\n\nexports.CF_SHARED_CDN = \"d3jpl91pxevbkh.cloudfront.net\";\nexports.OLD_AKAMAI_SHARED_CDN = \"cloudinary-a.akamaihd.net\";\nexports.AKAMAI_SHARED_CDN = \"res.cloudinary.com\";\nexports.SHARED_CDN = exports.AKAMAI_SHARED_CDN;\nexports.USER_AGENT = `CloudinaryNodeJS/${exports.VERSION} (Node ${process.versions.node})`;\n\n// Add platform information to the USER_AGENT header\n// This is intended for platform information and not individual applications!\nexports.userPlatform = \"\";\n\nfunction getUserAgent() {\n  return isEmpty(utils.userPlatform) ? `${utils.USER_AGENT}` : `${utils.userPlatform} ${utils.USER_AGENT}`;\n}\n\nconst {\n  DEFAULT_RESPONSIVE_WIDTH_TRANSFORMATION,\n  DEFAULT_POSTER_OPTIONS,\n  DEFAULT_VIDEO_SOURCE_TYPES,\n  CONDITIONAL_OPERATORS,\n  PREDEFINED_VARS,\n  LAYER_KEYWORD_PARAMS,\n  TRANSFORMATION_PARAMS,\n  SIMPLE_PARAMS,\n  UPLOAD_PREFIX,\n  SUPPORTED_SIGNATURE_ALGORITHMS,\n  DEFAULT_SIGNATURE_ALGORITHM\n} = require('./consts');\n\nfunction textStyle(layer) {\n  let keywords = [];\n  let style = \"\";\n\n  if (!isEmpty(layer.text_style)) {\n    return layer.text_style;\n  }\n  Object.keys(LAYER_KEYWORD_PARAMS).forEach((attr) => {\n    let default_value = LAYER_KEYWORD_PARAMS[attr];\n    let attr_value = layer[attr] || default_value;\n    if (attr_value !== default_value) {\n      keywords.push(attr_value);\n    }\n  });\n\n  Object.keys(layer).forEach((attr) => {\n    if (attr === \"letter_spacing\" || attr === \"line_spacing\") {\n      keywords.push(`${attr}_${layer[attr]}`);\n    }\n    if (attr === \"font_hinting\") {\n      keywords.push(`${attr.split(\"_\").pop()}_${layer[attr]}`);\n    }\n    if (attr === \"font_antialiasing\") {\n      keywords.push(`antialias_${layer[attr]}`);\n    }\n  });\n\n  if (layer.hasOwnProperty(\"font_size\" || \"font_family\") || !isEmpty(keywords)) {\n    if (!layer.font_size) throw `Must supply font_size for text in overlay/underlay`;\n    if (!layer.font_family) throw `Must supply font_family for text in overlay/underlay`;\n    keywords.unshift(layer.font_size);\n    keywords.unshift(layer.font_family);\n    style = compact(keywords).join(\"_\");\n  }\n  return style;\n}\n\n/**\n * Normalize an expression string, replace \"nice names\" with their coded values and spaces with \"_\"\n * e.g. `width > 0` => `w_lt_0`\n *\n * @param {String} expression An expression to be normalized\n * @return {Object|String} A normalized String of the input value if possible otherwise the value itself\n */\nfunction normalize_expression(expression) {\n  if (!isString(expression) || expression.length === 0 || expression.match(/^!.+!$/)) {\n    return expression;\n  }\n\n  const operators = \"\\\\|\\\\||>=|<=|&&|!=|>|=|<|/|-|\\\\^|\\\\+|\\\\*\";\n  const operatorsPattern = \"((\" + operators + \")(?=[ _]))\";\n  const operatorsReplaceRE = new RegExp(operatorsPattern, \"g\");\n  expression = expression.replace(operatorsReplaceRE, match => CONDITIONAL_OPERATORS[match]);\n\n  // Duplicate PREDEFINED_VARS to also include :{var_name} as well as {var_name}\n  // Example:\n  // -- PREDEFINED_VARS = ['foo']\n  // -- predefinedVarsPattern = ':foo|foo'\n  // It is done like this because node 6 does not support regex lookbehind\n  const predefinedVarsPattern = \"(\" + Object.keys(PREDEFINED_VARS).map(v => `:${v}|${v}`).join(\"|\") + \")\";\n  const userVariablePattern = '(\\\\$_*[^_ ]+)';\n  const variablesReplaceRE = new RegExp(`${userVariablePattern}|${predefinedVarsPattern}`, \"g\");\n  expression = expression.replace(variablesReplaceRE, (match) => (PREDEFINED_VARS[match] || match));\n\n  return expression.replace(/[ _]+/g, '_');\n}\n\n/**\n * Parse custom_function options\n * @private\n * @param {object|*} customFunction a custom function object containing function_type and source values\n * @return {string|*} custom_function transformation string\n */\nfunction process_custom_function(customFunction) {\n  if (!isObject(customFunction)) {\n    return customFunction;\n  }\n  if (customFunction.function_type === \"remote\") {\n    const encodedSource = base64EncodeURL(customFunction.source);\n\n    return [customFunction.function_type, encodedSource].join(\":\");\n  }\n  return [customFunction.function_type, customFunction.source].join(\":\");\n}\n\n/**\n * Parse custom_pre_function options\n * @private\n * @param {object|*} customPreFunction a custom function object containing function_type and source values\n * @return {string|*} custom_pre_function transformation string\n */\nfunction process_custom_pre_function(customPreFunction) {\n  let result = process_custom_function(customPreFunction);\n  return utils.isString(result) ? `pre:${result}` : null;\n}\n\n/**\n * Parse \"if\" parameter\n * Translates the condition if provided.\n * @private\n * @return {string} \"if_\" + ifValue\n */\nfunction process_if(ifValue) {\n  return ifValue ? \"if_\" + normalize_expression(ifValue) : ifValue;\n}\n\n/**\n * Parse layer options\n * @private\n * @param {object|*} layer The layer to parse.\n * @return {string} layer transformation string\n */\nfunction process_layer(layer) {\n  let result = '';\n  if (isPlainObject(layer)) {\n    if (layer.resource_type === \"fetch\" || (layer.url != null)) {\n      result = `fetch:${base64EncodeURL(layer.url)}`;\n    } else {\n      let public_id = layer.public_id;\n      let format = layer.format;\n      let resource_type = layer.resource_type || \"image\";\n      let type = layer.type || \"upload\";\n      let text = layer.text;\n      let style = null;\n      let components = [];\n      const noPublicId = isEmpty(public_id);\n      if (!noPublicId) {\n        public_id = public_id.replace(new RegExp(\"/\", 'g'), \":\");\n        if (format != null) {\n          public_id = `${public_id}.${format}`;\n        }\n      }\n      if (isEmpty(text) && resource_type !== \"text\") {\n        if (noPublicId) {\n          throw \"Must supply public_id for resource_type layer_parameter\";\n        }\n        if (resource_type === \"subtitles\") {\n          style = textStyle(layer);\n        }\n      } else {\n        resource_type = \"text\";\n        type = null;\n        // type is ignored for text layers\n        style = textStyle(layer);\n        if (!isEmpty(text)) {\n          const noStyle = isEmpty(style);\n          if (!(noPublicId || noStyle) || (noPublicId && noStyle)) {\n            throw \"Must supply either style parameters or a public_id when providing text parameter in a text overlay/underlay\";\n          }\n          let re = /\\$\\([a-zA-Z]\\w*\\)/g;\n          let start = 0;\n          let textSource = smart_escape(decodeURIComponent(text), /[,\\/]/g);\n          text = \"\";\n          for (let res = re.exec(textSource); res; res = re.exec(textSource)) {\n            text += smart_escape(textSource.slice(start, res.index));\n            text += res[0];\n            start = res.index + res[0].length;\n          }\n          text += encodeURIComponent(textSource.slice(start));\n        }\n      }\n      if (resource_type !== \"image\") {\n        components.push(resource_type);\n      }\n      if (type !== \"upload\") {\n        components.push(type);\n      }\n      components.push(style);\n      components.push(public_id);\n      components.push(text);\n      result = compact(components).join(\":\");\n    }\n  } else if (/^fetch:.+/.test(layer)) {\n    result = `fetch:${base64EncodeURL(layer.substr(6))}`;\n  } else {\n    result = layer;\n  }\n  return result;\n}\n\n/**\n * Parse radius options\n * @private\n * @param {Array<string|number>|string|number} radius The radius to parse\n * @return {string} radius transformation string\n */\nfunction process_radius(radius) {\n  if (!radius) {\n    return radius;\n  }\n  if (!isArray(radius)) {\n    radius = [radius];\n  }\n  if (radius.length === 0 || radius.length > 4) {\n    throw new Error(\"Radius array should contain between 1 and 4 values\");\n  }\n  if (radius.findIndex(x => x === null) >= 0) {\n    throw new Error(\"Corner: Cannot be null\");\n  }\n  return radius.map(normalize_expression).join(':');\n}\n\nfunction build_multi_and_sprite_params(tagOrOptions, options) {\n  let tag = null;\n  if (typeof tagOrOptions === 'string') {\n    tag = tagOrOptions;\n  } else {\n    if (isEmpty(options)) {\n      options = tagOrOptions;\n    } else {\n      throw new Error('First argument must be a tag when additional options are passed');\n    }\n    tag = null;\n  }\n  if (!options && !tag) {\n    throw new Error('Either tag or urls are required')\n  }\n  if (!options) {\n    options = {}\n  }\n  const urls = options.urls\n  const transformation = generate_transformation_string(extend({}, options, {\n    fetch_format: options.format\n  }));\n  return {\n    tag,\n    transformation,\n    urls,\n    timestamp: utils.timestamp(),\n    async: options.async,\n    notification_url: options.notification_url\n  };\n}\n\nfunction build_upload_params(options) {\n  let params = {\n    access_mode: options.access_mode,\n    allowed_formats: options.allowed_formats && toArray(options.allowed_formats).join(\",\"),\n    asset_folder: options.asset_folder,\n    async: utils.as_safe_bool(options.async),\n    backup: utils.as_safe_bool(options.backup),\n    callback: options.callback,\n    cinemagraph_analysis: utils.as_safe_bool(options.cinemagraph_analysis),\n    colors: utils.as_safe_bool(options.colors),\n    display_name: options.display_name,\n    discard_original_filename: utils.as_safe_bool(options.discard_original_filename),\n    eager: utils.build_eager(options.eager),\n    eager_async: utils.as_safe_bool(options.eager_async),\n    eager_notification_url: options.eager_notification_url,\n    eval: options.eval,\n    exif: utils.as_safe_bool(options.exif),\n    faces: utils.as_safe_bool(options.faces),\n    folder: options.folder,\n    format: options.format,\n    filename_override: options.filename_override,\n    image_metadata: utils.as_safe_bool(options.image_metadata),\n    media_metadata: utils.as_safe_bool(options.media_metadata),\n    invalidate: utils.as_safe_bool(options.invalidate),\n    moderation: options.moderation,\n    notification_url: options.notification_url,\n    overwrite: utils.as_safe_bool(options.overwrite),\n    phash: utils.as_safe_bool(options.phash),\n    proxy: options.proxy,\n    public_id: options.public_id,\n    public_id_prefix: options.public_id_prefix,\n    quality_analysis: utils.as_safe_bool(options.quality_analysis),\n    responsive_breakpoints: utils.generate_responsive_breakpoints_string(options.responsive_breakpoints),\n    return_delete_token: utils.as_safe_bool(options.return_delete_token),\n    timestamp: options.timestamp || exports.timestamp(),\n    transformation: utils.generate_transformation_string(clone(options)),\n    type: options.type,\n    unique_filename: utils.as_safe_bool(options.unique_filename),\n    upload_preset: options.upload_preset,\n    use_filename: utils.as_safe_bool(options.use_filename),\n    use_filename_as_display_name: utils.as_safe_bool(options.use_filename_as_display_name),\n    quality_override: options.quality_override,\n    accessibility_analysis: utils.as_safe_bool(options.accessibility_analysis),\n    use_asset_folder_as_public_id_prefix: utils.as_safe_bool(options.use_asset_folder_as_public_id_prefix)\n  };\n  return utils.updateable_resource_params(options, params);\n}\n\nfunction encode_key_value(arg) {\n  if (!isObject(arg)) { return arg; }\n  return entries(arg).map(([k, v]) => `${k}=${v}`).join('|');\n}\n\n\n/**\n * @description Escape = and | with two backslashes \\\\\n * @param {string|number} value\n * @return {string}\n */\nfunction escapeMetadataValue(value) {\n  return value.toString().replace(/([=|])/g, '\\\\$&');\n}\n\n\n/**\n *\n * @description Encode metadata fields based on incoming value.\n *              If array, escape as color_id=[\\\"green\\\",\\\"red\\\"]\n *              If string/number, escape as in_stock_id=50\n *\n *              Joins resulting values with a pipe:\n *              in_stock_id=50|color_id=[\\\"green\\\",\\\"red\\\"]\n *\n *              = and | and escaped by default (this can't be turned off)\n *\n * @param metadataObj\n * @return {string}\n */\nfunction encode_context(metadataObj) {\n  if (!isObject(metadataObj)) { return metadataObj; }\n\n  return entries(metadataObj).map(([key, value]) => {\n    // if string, simply parse the value and move on\n    if (isString(value)) {\n      return `${key}=${escapeMetadataValue(value)}`;\n\n      // If array, parse each item individually\n    } else if (isArray(value)) {\n      let values = value.map((innerVal) => {\n        return `\\\"${escapeMetadataValue(innerVal)}\\\"`\n      }).join(',');\n      return `${key}=[${values}]`\n      // if unknown, return the value as string\n    } else {\n      return value.toString();\n    }\n  }).join('|');\n}\n\nfunction build_eager(transformations) {\n  return toArray(transformations)\n    .map((transformation) => {\n      const transformationString = utils.generate_transformation_string(clone(transformation));\n      const format = transformation.format;\n      return format == null ? transformationString : `${transformationString}/${format}`;\n    }).join('|');\n}\n/**\n * Build the custom headers for the request\n * @private\n * @param headers\n * @return {Array<string>|object|string} An object of name and value,\n *         an array of header strings, or a string of headers\n */\nfunction build_custom_headers(headers) {\n  switch (true) {\n  case headers == null:\n    return void 0;\n  case isArray(headers):\n    return headers.join(\"\\n\");\n  case isObject(headers):\n    return entries(headers).map(([k, v]) => `${k}:${v}`).join(\"\\n\");\n  default:\n    return headers;\n  }\n}\n\nfunction generate_transformation_string(options) {\n  if (utils.isString(options)) {\n    return options;\n  }\n  if (isArray(options)) {\n    return options.map(t => utils.generate_transformation_string(clone(t))).filter(utils.present).join('/');\n  }\n\n  let responsive_width = consumeOption(options, \"responsive_width\", config().responsive_width);\n  let width = options.width;\n  let height = options.height;\n  let size = consumeOption(options, \"size\");\n  if (size) {\n    [width, height] = size.split(\"x\");\n    [options.width, options.height] = [width, height];\n  }\n  let has_layer = options.overlay || options.underlay;\n  let crop = consumeOption(options, \"crop\");\n  let angle = toArray(consumeOption(options, \"angle\")).join(\".\");\n  let no_html_sizes = has_layer || utils.present(angle) || crop === \"fit\" || crop === \"limit\" || responsive_width;\n  if (width && (width.toString().indexOf(\"auto\") === 0 || no_html_sizes || parseFloat(width) < 1)) {\n    delete options.width;\n  }\n  if (height && (no_html_sizes || parseFloat(height) < 1)) {\n    delete options.height;\n  }\n  let background = consumeOption(options, \"background\");\n  background = background && background.replace(/^#/, \"rgb:\");\n  let color = consumeOption(options, \"color\");\n  color = color && color.replace(/^#/, \"rgb:\");\n  let base_transformations = toArray(consumeOption(options, \"transformation\", []));\n  let named_transformation = [];\n  if (base_transformations.some(isObject)) {\n    base_transformations = base_transformations.map(tr => utils.generate_transformation_string(\n      isObject(tr) ? clone(tr) : { transformation: tr }\n    ));\n  } else {\n    named_transformation = base_transformations.join(\".\");\n    base_transformations = [];\n  }\n  let effect = consumeOption(options, \"effect\");\n  if (isArray(effect)) {\n    effect = effect.join(\":\");\n  } else if (isObject(effect)) {\n    effect = entries(effect).map(\n      ([key, value]) => `${key}:${value}`\n    );\n  }\n  let border = consumeOption(options, \"border\");\n  if (isObject(border)) {\n    border = `${border.width != null ? border.width : 2}px_solid_${(border.color != null ? border.color : \"black\").replace(/^#/, 'rgb:')}`;\n  } else if (/^\\d+$/.exec(border)) { // fallback to html border attributes\n    options.border = border;\n    border = void 0;\n  }\n  let flags = toArray(consumeOption(options, \"flags\")).join(\".\");\n  let dpr = consumeOption(options, \"dpr\", config().dpr);\n  if (options.offset != null) {\n    [options.start_offset, options.end_offset] = split_range(consumeOption(options, \"offset\"));\n  }\n  if (options.start_offset) {\n    options.start_offset = normalize_expression(options.start_offset);\n  }\n  if (options.end_offset) {\n    options.end_offset = normalize_expression(options.end_offset);\n  }\n  let overlay = process_layer(consumeOption(options, \"overlay\"));\n  let radius = process_radius(consumeOption(options, \"radius\"));\n  let underlay = process_layer(consumeOption(options, \"underlay\"));\n  let ifValue = process_if(consumeOption(options, \"if\"));\n  let custom_function = process_custom_function(consumeOption(options, \"custom_function\"));\n  let custom_pre_function = process_custom_pre_function(consumeOption(options, \"custom_pre_function\"));\n  let fps = consumeOption(options, 'fps');\n  if (isArray(fps)) {\n    fps = fps.join('-');\n  }\n  let params = {\n    a: normalize_expression(angle),\n    ar: normalize_expression(consumeOption(options, \"aspect_ratio\")),\n    b: background,\n    bo: border,\n    c: crop,\n    co: color,\n    dpr: normalize_expression(dpr),\n    e: normalize_expression(effect),\n    fl: flags,\n    fn: custom_function || custom_pre_function,\n    fps: fps,\n    h: normalize_expression(height),\n    ki: normalize_expression(consumeOption(options, \"keyframe_interval\")),\n    l: overlay,\n    o: normalize_expression(consumeOption(options, \"opacity\")),\n    q: normalize_expression(consumeOption(options, \"quality\")),\n    r: radius,\n    t: named_transformation,\n    u: underlay,\n    w: normalize_expression(width),\n    x: normalize_expression(consumeOption(options, \"x\")),\n    y: normalize_expression(consumeOption(options, \"y\")),\n    z: normalize_expression(consumeOption(options, \"zoom\"))\n  };\n\n  SIMPLE_PARAMS.forEach(([name, short]) => {\n    let value = consumeOption(options, name);\n    if (value !== undefined) {\n      params[short] = value;\n    }\n  });\n  if (params.vc != null) {\n    params.vc = process_video_params(params.vc);\n  }\n  [\"so\", \"eo\", \"du\"].forEach((short) => {\n    if (params[short] !== undefined) {\n      params[short] = norm_range_value(params[short]);\n    }\n  });\n\n  let variablesParam = consumeOption(options, \"variables\", []);\n  let variables = entries(options)\n    .filter(([key, value]) => key.startsWith('$'))\n    .map(([key, value]) => {\n      delete options[key];\n      return `${key}_${normalize_expression(value)}`;\n    }).sort().concat(\n      variablesParam.map(([name, value]) => `${name}_${normalize_expression(value)}`)\n    ).join(',');\n\n  let transformations = entries(params)\n    .filter(([key, value]) => utils.present(value))\n    .map(([key, value]) => key + '_' + value)\n    .sort()\n    .join(',');\n\n  let raw_transformation = consumeOption(options, 'raw_transformation');\n  transformations = compact([ifValue, variables, transformations, raw_transformation]).join(\",\");\n  base_transformations.push(transformations);\n  transformations = base_transformations;\n  if (responsive_width) {\n    let responsive_width_transformation = config().responsive_width_transformation\n      || DEFAULT_RESPONSIVE_WIDTH_TRANSFORMATION;\n\n    transformations.push(utils.generate_transformation_string(clone(responsive_width_transformation)));\n  }\n  if (String(width).startsWith(\"auto\") || responsive_width) {\n    options.responsive = true;\n  }\n  if (dpr === \"auto\") {\n    options.hidpi = true;\n  }\n  return filter(transformations, utils.present).join(\"/\");\n}\n\nfunction updateable_resource_params(options, params = {}) {\n  if (options.access_control != null) {\n    params.access_control = utils.jsonArrayParam(options.access_control);\n  }\n  if (options.auto_tagging != null) {\n    params.auto_tagging = options.auto_tagging;\n  }\n  if (options.background_removal != null) {\n    params.background_removal = options.background_removal;\n  }\n  if (options.categorization != null) {\n    params.categorization = options.categorization;\n  }\n  if (options.context != null) {\n    params.context = utils.encode_context(options.context);\n  }\n  if (options.metadata != null) {\n    params.metadata = utils.encode_context(options.metadata);\n  }\n  if (options.custom_coordinates != null) {\n    params.custom_coordinates = encodeDoubleArray(options.custom_coordinates);\n  }\n  if (options.detection != null) {\n    params.detection = options.detection;\n  }\n  if (options.face_coordinates != null) {\n    params.face_coordinates = encodeDoubleArray(options.face_coordinates);\n  }\n  if (options.headers != null) {\n    params.headers = utils.build_custom_headers(options.headers);\n  }\n  if (options.notification_url != null) {\n    params.notification_url = options.notification_url;\n  }\n  if (options.ocr != null) {\n    params.ocr = options.ocr;\n  }\n  if (options.raw_convert != null) {\n    params.raw_convert = options.raw_convert;\n  }\n  if (options.similarity_search != null) {\n    params.similarity_search = options.similarity_search;\n  }\n  if (options.tags != null) {\n    params.tags = toArray(options.tags).join(\",\");\n  }\n  if (options.quality_override != null) {\n    params.quality_override = options.quality_override;\n  }\n  if (options.asset_folder != null){\n    params.asset_folder = options.asset_folder;\n  }\n  if (options.display_name != null){\n    params.display_name = options.display_name;\n  }\n  if (options.unique_display_name != null){\n    params.unique_display_name = options.unique_display_name;\n  }\n  return params;\n}\n\n/**\n * A list of keys used by the url() function.\n * @private\n */\nconst URL_KEYS = [\n  'api_secret',\n  'auth_token',\n  'cdn_subdomain',\n  'cloud_name',\n  'cname',\n  'format',\n  'long_url_signature',\n  'private_cdn',\n  'resource_type',\n  'secure',\n  'secure_cdn_subdomain',\n  'secure_distribution',\n  'shorten',\n  'sign_url',\n  'ssl_detected',\n  'type',\n  'url_suffix',\n  'use_root_path',\n  'version'\n];\n\n/**\n * Create a new object with only URL parameters\n * @param {object} options The source object\n * @return {Object} An object containing only URL parameters\n */\n\nfunction extractUrlParams(options) {\n  return pickOnlyExistingValues(options, ...URL_KEYS);\n}\n\n/**\n * Create a new object with only transformation parameters\n * @param {object} options The source object\n * @return {Object} An object containing only transformation parameters\n */\n\nfunction extractTransformationParams(options) {\n  return pickOnlyExistingValues(options, ...TRANSFORMATION_PARAMS);\n}\n\n/**\n * Handle the format parameter for fetch urls\n * @private\n * @param options url and transformation options. This argument may be changed by the function!\n */\n\nfunction patchFetchFormat(options = {}) {\n  if (options.type === \"fetch\") {\n    if (options.fetch_format == null) {\n      options.fetch_format = consumeOption(options, \"format\");\n    }\n  }\n}\n\nfunction url(public_id, options = {}) {\n  let signature, source_to_sign;\n  utils.patchFetchFormat(options);\n  let type = consumeOption(options, \"type\", null);\n  let transformation = utils.generate_transformation_string(options);\n\n  let resource_type = consumeOption(options, \"resource_type\", \"image\");\n  let version = consumeOption(options, \"version\");\n  let force_version = consumeOption(options, \"force_version\", config().force_version);\n  if (force_version == null) {\n    force_version = true;\n  }\n  let long_url_signature = !!consumeOption(options, \"long_url_signature\", config().long_url_signature);\n  let format = consumeOption(options, \"format\");\n  let cloud_name = consumeOption(options, \"cloud_name\", config().cloud_name);\n  if (!cloud_name) {\n    throw \"Unknown cloud_name\";\n  }\n  let private_cdn = consumeOption(options, \"private_cdn\", config().private_cdn);\n  let secure_distribution = consumeOption(options, \"secure_distribution\", config().secure_distribution);\n  let secure = consumeOption(options, \"secure\", null);\n  let ssl_detected = consumeOption(options, \"ssl_detected\", config().ssl_detected);\n  if (secure === null) {\n    secure = ssl_detected || config().secure;\n  }\n  let cdn_subdomain = consumeOption(options, \"cdn_subdomain\", config().cdn_subdomain);\n  let secure_cdn_subdomain = consumeOption(options, \"secure_cdn_subdomain\", config().secure_cdn_subdomain);\n  let cname = consumeOption(options, \"cname\", config().cname);\n  let shorten = consumeOption(options, \"shorten\", config().shorten);\n  let sign_url = consumeOption(options, \"sign_url\", config().sign_url);\n  let api_secret = consumeOption(options, \"api_secret\", config().api_secret);\n  let url_suffix = consumeOption(options, \"url_suffix\");\n  let use_root_path = consumeOption(options, \"use_root_path\", config().use_root_path);\n  let signature_algorithm = consumeOption(options, \"signature_algorithm\", config().signature_algorithm || DEFAULT_SIGNATURE_ALGORITHM);\n  if (long_url_signature) {\n    signature_algorithm = 'sha256';\n  }\n  let auth_token = consumeOption(options, \"auth_token\");\n  if (auth_token !== false) {\n    auth_token = exports.merge(config().auth_token, auth_token);\n  }\n  let preloaded = /^(image|raw)\\/([a-z0-9_]+)\\/v(\\d+)\\/([^#]+)$/.exec(public_id);\n  if (preloaded) {\n    resource_type = preloaded[1];\n    type = preloaded[2];\n    version = preloaded[3];\n    public_id = preloaded[4];\n  }\n  let original_source = public_id;\n  if (public_id == null) {\n    return original_source;\n  }\n  public_id = public_id.toString();\n  if (type === null && public_id.match(/^https?:\\//i)) {\n    return original_source;\n  }\n  [resource_type, type] = finalize_resource_type(resource_type, type, url_suffix, use_root_path, shorten);\n  [public_id, source_to_sign] = finalize_source(public_id, format, url_suffix);\n\n  if (version == null && force_version && source_to_sign.indexOf(\"/\") >= 0 && !source_to_sign.match(/^v[0-9]+/) && !source_to_sign.match(/^https?:\\//)) {\n    version = 1;\n  }\n  if (version != null) {\n    version = `v${version}`;\n  } else {\n    version = null;\n  }\n\n  transformation = transformation.replace(/([^:])\\/\\//g, '$1/');\n  if (sign_url && isEmpty(auth_token)) {\n    let to_sign = [transformation, source_to_sign].filter(function (part) {\n      return (part != null) && part !== '';\n    }).join('/');\n    try {\n      for (let i = 0; to_sign !== decodeURIComponent(to_sign) && i < 10; i++) {\n        to_sign = decodeURIComponent(to_sign);\n      }\n      // eslint-disable-next-line no-empty\n    } catch (error) {\n    }\n    let hash = computeHash(to_sign + api_secret, signature_algorithm, 'base64');\n    signature = hash.replace(/\\//g, '_').replace(/\\+/g, '-').substring(0, long_url_signature ? 32 : 8);\n    signature = `s--${signature}--`;\n  }\n  let prefix = unsigned_url_prefix(\n    public_id,\n    cloud_name,\n    private_cdn,\n    cdn_subdomain,\n    secure_cdn_subdomain,\n    cname,\n    secure,\n    secure_distribution\n  );\n  let resultUrl = [prefix, resource_type, type, signature, transformation, version, public_id].filter(function (part) {\n    return (part != null) && part !== '';\n  }).join('/').replace(/ /g, '%20');\n  if (sign_url && !isEmpty(auth_token)) {\n    auth_token.url = urlParse(resultUrl).path;\n    let token = generate_token(auth_token);\n    resultUrl += `?${token}`;\n  }\n\n  let urlAnalytics = ensureOption(options, 'urlAnalytics', false);\n\n  if (urlAnalytics === true) {\n    let { sdkCode, sdkSemver, techVersion } = getSDKVersions();\n    let sdkVersions = {\n      sdkCode: ensureOption(options, 'sdkCode', sdkCode),\n      sdkSemver: ensureOption(options, 'sdkSemver', sdkSemver),\n      techVersion: ensureOption(options, 'techVersion', techVersion)\n    };\n\n    let analyticsOptions = getAnalyticsOptions(\n      Object.assign({}, options, sdkVersions)\n    );\n\n    let sdkAnalyticsSignature = getSDKAnalyticsSignature(analyticsOptions);\n\n    // url might already have a '?' query param\n    let appender = '?';\n    if (resultUrl.indexOf('?') >= 0) {\n      appender = '&';\n    }\n    resultUrl = `${resultUrl}${appender}_a=${sdkAnalyticsSignature}`;\n  }\n\n  return resultUrl;\n}\n\nfunction video_url(public_id, options) {\n  options = extend({\n    resource_type: 'video'\n  }, options);\n  return utils.url(public_id, options);\n}\n\nfunction finalize_source(source, format, url_suffix) {\n  let source_to_sign;\n  source = source.replace(/([^:])\\/\\//g, '$1/');\n  if (source.match(/^https?:\\//i)) {\n    source = smart_escape(source);\n    source_to_sign = source;\n  } else {\n    source = encodeURIComponent(decodeURIComponent(source)).replace(/%3A/g, \":\").replace(/%2F/g, \"/\");\n    source_to_sign = source;\n    if (url_suffix) {\n      if (url_suffix.match(/[\\.\\/]/)) {\n        throw new Error('url_suffix should not include . or /');\n      }\n      source = source + '/' + url_suffix;\n    }\n    if (format != null) {\n      source = source + '.' + format;\n      source_to_sign = source_to_sign + '.' + format;\n    }\n  }\n  return [source, source_to_sign];\n}\n\nfunction video_thumbnail_url(public_id, options) {\n  options = extend({}, DEFAULT_POSTER_OPTIONS, options);\n  return utils.url(public_id, options);\n}\n\nfunction finalize_resource_type(resource_type, type, url_suffix, use_root_path, shorten) {\n  if (type == null) {\n    type = 'upload';\n  }\n  if (url_suffix != null) {\n    if (resource_type === 'image' && type === 'upload') {\n      resource_type = \"images\";\n      type = null;\n    } else if (resource_type === 'image' && type === 'private') {\n      resource_type = 'private_images';\n      type = null;\n    } else if (resource_type === 'image' && type === 'authenticated') {\n      resource_type = 'authenticated_images';\n      type = null;\n    } else if (resource_type === 'raw' && type === 'upload') {\n      resource_type = 'files';\n      type = null;\n    } else if (resource_type === 'video' && type === 'upload') {\n      resource_type = 'videos';\n      type = null;\n    } else {\n      throw new Error(\"URL Suffix only supported for image/upload, image/private, image/authenticated, video/upload and raw/upload\");\n    }\n  }\n  if (use_root_path) {\n    if ((resource_type === 'image' && type === 'upload') || (resource_type === 'images' && (type == null))) {\n      resource_type = null;\n      type = null;\n    } else {\n      throw new Error(\"Root path only supported for image/upload\");\n    }\n  }\n  if (shorten && resource_type === 'image' && type === 'upload') {\n    resource_type = 'iu';\n    type = null;\n  }\n  return [resource_type, type];\n}\n// cdn_subdomain and secure_cdn_subdomain\n// 1) Customers in shared distribution (e.g. res.cloudinary.com)\n//    if cdn_domain is true uses res-[1-5].cloudinary.com for both http and https.\n//    Setting secure_cdn_subdomain to false disables this for https.\n// 2) Customers with private cdn\n//    if cdn_domain is true uses cloudname-res-[1-5].cloudinary.com for http\n//    if secure_cdn_domain is true uses cloudname-res-[1-5].cloudinary.com for https\n//      (please contact support if you require this)\n// 3) Customers with cname\n//    if cdn_domain is true uses a[1-5].cname for http.\n//    For https, uses the same naming scheme as 1 for shared distribution and as 2 for private distribution.\n\nfunction unsigned_url_prefix(\n  source,\n  cloud_name,\n  private_cdn,\n  cdn_subdomain,\n  secure_cdn_subdomain,\n  cname,\n  secure,\n  secure_distribution\n) {\n  let prefix;\n  if (cloud_name.indexOf(\"/\") === 0) {\n    return '/res' + cloud_name;\n  }\n  let shared_domain = !private_cdn;\n  if (secure) {\n    if ((secure_distribution == null) || secure_distribution === exports.OLD_AKAMAI_SHARED_CDN) {\n      secure_distribution = private_cdn ? cloud_name + \"-res.cloudinary.com\" : exports.SHARED_CDN;\n    }\n    if (shared_domain == null) {\n      shared_domain = secure_distribution === exports.SHARED_CDN;\n    }\n    if ((secure_cdn_subdomain == null) && shared_domain) {\n      secure_cdn_subdomain = cdn_subdomain;\n    }\n    if (secure_cdn_subdomain) {\n      secure_distribution = secure_distribution.replace('res.cloudinary.com', 'res-' + ((crc32(source) % 5) + 1 + '.cloudinary.com'));\n    }\n    prefix = 'https://' + secure_distribution;\n  } else if (cname) {\n    let subdomain = cdn_subdomain ? 'a' + ((crc32(source) % 5) + 1) + '.' : '';\n    prefix = 'http://' + subdomain + cname;\n  } else {\n    let cdn_part = private_cdn ? cloud_name + '-' : '';\n    let subdomain_part = cdn_subdomain ? '-' + ((crc32(source) % 5) + 1) : '';\n    let host = [cdn_part, 'res', subdomain_part, '.cloudinary.com'].join('');\n    prefix = 'http://' + host;\n  }\n  if (shared_domain) {\n    prefix += '/' + cloud_name;\n  }\n  return prefix;\n}\n\nfunction base_api_url(path= [], options = {}) {\n  let cloudinary = ensureOption(options, \"upload_prefix\", UPLOAD_PREFIX);\n  let cloud_name = ensureOption(options, \"cloud_name\");\n  let encode_path = unencoded_path => encodeURIComponent(unencoded_path).replace(\"'\", '%27');\n  let encoded_path = Array.isArray(path) ? path.map(encode_path) : encode_path(path);\n  return [cloudinary, \"v1_1\", cloud_name].concat(encoded_path).join(\"/\");\n}\n\nfunction api_url(action = 'upload', options = {}) {\n  let resource_type = options.resource_type || \"image\";\n  return base_api_url([resource_type, action], options);\n}\n\nfunction random_public_id() {\n  return crypto.randomBytes(12).toString('base64').replace(/[^a-z0-9]/g, \"\");\n}\n\nfunction signed_preloaded_image(result) {\n  return `${result.resource_type}/upload/v${result.version}/${filter([result.public_id, result.format], utils.present).join(\".\")}#${result.signature}`;\n}\n\nfunction api_sign_request(params_to_sign, api_secret) {\n  let to_sign = entries(params_to_sign).filter(\n    ([k, v]) => utils.present(v)\n  ).map(\n    ([k, v]) => `${k}=${toArray(v).join(\",\")}`\n  ).sort().join(\"&\");\n  return computeHash(to_sign + api_secret, config().signature_algorithm || DEFAULT_SIGNATURE_ALGORITHM, 'hex');\n}\n\n/**\n * Computes hash from input string using specified algorithm.\n * @private\n * @param {string} input string which to compute hash from\n * @param {string} signature_algorithm algorithm to use for computing hash\n * @param {string} encoding type of encoding\n * @return {string} computed hash value\n */\nfunction computeHash(input, signature_algorithm, encoding) {\n  if (!SUPPORTED_SIGNATURE_ALGORITHMS.includes(signature_algorithm)) {\n    throw new Error(`Signature algorithm ${signature_algorithm} is not supported. Supported algorithms: ${SUPPORTED_SIGNATURE_ALGORITHMS.join(', ')}`);\n  }\n  let hash = crypto.createHash(signature_algorithm);\n  hash.update(utf8_encode(input), 'binary');\n  return hash.digest(encoding);\n}\n\nfunction clear_blank(hash) {\n  let filtered_hash = {};\n  entries(hash).filter(\n    ([k, v]) => utils.present(v)\n  ).forEach(\n    ([k, v]) => {\n      filtered_hash[k] = v.filter ? v.filter(x => x) : v;\n    }\n  );\n  return filtered_hash;\n}\n\nfunction merge(hash1, hash2) {\n  return { ...hash1, ...hash2 };\n}\n\nfunction sign_request(params, options = {}) {\n  let apiKey = ensureOption(options, 'api_key');\n  let apiSecret = ensureOption(options, 'api_secret');\n  params = exports.clear_blank(params);\n  params.signature = exports.api_sign_request(params, apiSecret);\n  params.api_key = apiKey;\n  return params;\n}\n\nfunction webhook_signature(data, timestamp, options = {}) {\n  ensurePresenceOf({ data, timestamp });\n\n  let api_secret = ensureOption(options, 'api_secret');\n  let signature_algorithm = ensureOption(options, 'signature_algorithm', DEFAULT_SIGNATURE_ALGORITHM);\n  return computeHash(data + timestamp + api_secret, signature_algorithm, 'hex');\n}\n\n/**\n * Verifies the authenticity of a notification signature\n *\n * @param {string} body JSON of the request's body\n * @param {number} timestamp Unix timestamp in seconds. Can be retrieved from the X-Cld-Timestamp header\n * @param {string} signature Actual signature. Can be retrieved from the X-Cld-Signature header\n * @param {number} [valid_for=7200] The desired time in seconds for considering the request valid\n *\n * @return {boolean}\n */\nfunction verifyNotificationSignature(body, timestamp, signature, valid_for = 7200) {\n  // verify that signature is valid for the given timestamp\n  if (timestamp < Math.round(Date.now() / 1000) - valid_for) {\n    return false;\n  }\n  const payload_hash = utils.webhook_signature(body, timestamp, {\n    api_secret: config().api_secret,\n    signature_algorithm: config().signature_algorithm\n  });\n  return signature === payload_hash;\n}\n\nfunction process_request_params(params, options) {\n  if ((options.unsigned != null) && options.unsigned) {\n    params = exports.clear_blank(params);\n    delete params.timestamp;\n  } else if (options.oauth_token || config().oauth_token) {\n    params = exports.clear_blank(params);\n  } else if (options.signature) {\n    params = exports.clear_blank(options);\n  } else {\n    params = exports.sign_request(params, options);\n  }\n\n  return params;\n}\n\nfunction private_download_url(public_id, format, options = {}) {\n  let params = exports.sign_request({\n    timestamp: options.timestamp || exports.timestamp(),\n    public_id: public_id,\n    format: format,\n    type: options.type,\n    attachment: options.attachment,\n    expires_at: options.expires_at\n  }, options);\n  return exports.api_url(\"download\", options) + \"?\" + querystring.stringify(params);\n}\n\n/**\n * Utility method that uses the deprecated ZIP download API.\n * @deprecated Replaced by {download_zip_url} that uses the more advanced and robust archive generation and download API\n */\n\nfunction zip_download_url(tag, options = {}) {\n  let params = exports.sign_request({\n    timestamp: options.timestamp || exports.timestamp(),\n    tag: tag,\n    transformation: utils.generate_transformation_string(options)\n  }, options);\n  return exports.api_url(\"download_tag.zip\", options) + \"?\" + hashToQuery(params);\n}\n\n/**\n * The returned url should allow downloading the backedup asset based on the\n * version and asset id\n * asset and version id are returned with resource(<PUBLIC_ID1>, { versions: true })\n * @param asset_id\n * @param version_id\n * @param options\n * @returns {string }\n */\nfunction download_backedup_asset(asset_id, version_id, options = {}) {\n  let params = exports.sign_request({\n    timestamp: options.timestamp || exports.timestamp(),\n    asset_id: asset_id,\n    version_id: version_id\n  }, options);\n  return exports.base_api_url(['download_backup'], options) + \"?\" + hashToQuery(params);\n}\n\n/**\n * Utility method to create a signed URL for specified resources.\n * @param action\n * @param params\n * @param options\n */\nfunction api_download_url(action, params, options) {\n  const download_params = {...params, mode: \"download\"}\n  let cloudinary_params = exports.sign_request(download_params, options);\n  return exports.api_url(action, options) + \"?\" + hashToQuery(cloudinary_params);\n}\n\n/**\n * Returns a URL that when invokes creates an archive and returns it.\n * @param {object} options\n * @param {string} [options.resource_type=\"image\"] The resource type of files to include in the archive.\n *   Must be one of :image | :video | :raw\n * @param {string} [options.type=\"upload\"] The specific file type of resources: :upload|:private|:authenticated\n * @param {string|Array} [options.tags] list of tags to include in the archive\n * @param {string|Array<string>} [options.public_ids] list of public_ids to include in the archive\n * @param {string|Array<string>} [options.prefixes]  list of prefixes of public IDs (e.g., folders).\n * @param {string|Array<string>} [options.fully_qualified_public_ids] list of fully qualified public_ids to include\n *   in the archive.\n * @param {string|Array<string>} [options.transformations]  list of transformations.\n *   The derived images of the given transformations are included in the archive. Using the string representation of\n *   multiple chained transformations as we use for the 'eager' upload parameter.\n * @param {string} [options.mode=\"create\"] return the generated archive file or to store it as a raw resource and\n *   return a JSON with URLs for accessing the archive. Possible values: :download, :create\n * @param {string} [options.target_format=\"zip\"]\n * @param {string} [options.target_public_id]  public ID of the generated raw resource.\n *   Relevant only for the create mode. If not specified, random public ID is generated.\n * @param {boolean} [options.flatten_folders=false] If true, flatten public IDs with folders to be in the root\n *   of the archive. Add numeric counter to the file name in case of a name conflict.\n * @param {boolean} [options.flatten_transformations=false] If true, and multiple transformations are given,\n *   flatten the folder structure of derived images and store the transformation details on the file name instead.\n * @param {boolean} [options.use_original_filename] Use the original file name of included images\n *   (if available) instead of the public ID.\n * @param {boolean} [options.async=false] If true, return immediately and perform archive creation in the background.\n *   Relevant only for the create mode.\n * @param {string} [options.notification_url] URL to send an HTTP post request (webhook) to when the\n *   archive creation is completed.\n * @param {string|Array<string>} [options.target_tags=] Allows assigning one or more tags to the generated archive file\n *   (for later housekeeping via the admin API).\n * @param {string} [options.keep_derived=false] keep the derived images used for generating the archive\n * @return {String} archive url\n */\nfunction download_archive_url(options = {}) {\n  const params = exports.archive_params(merge(options, {\n    mode: \"download\"\n  }))\n  return api_download_url(\"generate_archive\", params, options)\n}\n\n/**\n * Returns a URL that when invokes creates an zip archive and returns it.\n * @see download_archive_url\n */\n\nfunction download_zip_url(options = {}) {\n  return exports.download_archive_url(merge(options, {\n    target_format: \"zip\"\n  }));\n}\n\n/**\n * Creates and returns a URL that when invoked creates an archive of a folder\n * @param {string} folder_path Full path (from the root) of the folder to download\n * @param {object} options Additional options\n * @returns {string} Url for downloading an archive of a folder\n */\nfunction download_folder(folder_path, options = {}) {\n  options.resource_type = options.resource_type || \"all\";\n  options.prefixes = folder_path;\n  let cloudinary_params = exports.sign_request(exports.archive_params(merge(options, {\n    mode: \"download\"\n  })), options);\n  return exports.api_url(\"generate_archive\", options) + \"?\" + hashToQuery(cloudinary_params);\n}\n\n/**\n * Render the key/value pair as an HTML tag attribute\n * @private\n * @param {string} key\n * @param {string|boolean|number} [value]\n * @return {string} A string representing the HTML attribute\n */\nfunction join_pair(key, value) {\n  if (!value) { return void 0; }\n  return value === true ? key : key + \"='\" + value + \"'\";\n}\n\n/**\n * If the given value is a string, replaces single or double quotes with character entities\n * @private\n * @param {*} value The string to encode quotes in\n * @return {*} Encoded string or original value if not a string\n */\nfunction escapeQuotes(value) {\n  return isString(value) ? value.replace(/\\\"/g, '&#34;').replace(/\\'/g, '&#39;') : value;\n}\n\n/**\n *\n * @param attrs\n * @return {*}\n */\nexports.html_attrs = function html_attrs(attrs) {\n  return filter(map(attrs, function (value, key) {\n    return join_pair(key, escapeQuotes(value));\n  })).sort().join(\" \");\n};\n\nconst CLOUDINARY_JS_CONFIG_PARAMS = ['api_key', 'cloud_name', 'private_cdn', 'secure_distribution', 'cdn_subdomain'];\n\nfunction cloudinary_js_config() {\n  let params = pickOnlyExistingValues(config(), ...CLOUDINARY_JS_CONFIG_PARAMS);\n  return `<script type='text/javascript'>\\n$.cloudinary.config(${JSON.stringify(params)});\\n</script>`;\n}\n\nfunction v1_result_adapter(callback) {\n  if (callback == null) { return undefined; }\n  return function (result) {\n    if (result.error != null) {\n      return callback(result.error);\n    }\n    return callback(void 0, result);\n  };\n}\n\nfunction v1_adapter(name, num_pass_args, v1) {\n  return function (...args) {\n    let pass_args = take(args, num_pass_args);\n    let options = args[num_pass_args];\n    let callback = args[num_pass_args + 1];\n    if ((callback == null) && isFunction(options)) {\n      callback = options;\n      options = {};\n    }\n    callback = v1_result_adapter(callback);\n    args = pass_args.concat([callback, options]);\n    return v1[name].apply(this, args);\n  };\n}\n\nfunction v1_adapters(exports, v1, mapping) {\n  return Object.keys(mapping).map((name) => {\n    let num_pass_args = mapping[name];\n    exports[name] = v1_adapter(name, num_pass_args, v1);\n    return exports[name];\n  });\n}\n\nfunction as_safe_bool(value) {\n  if (value == null) {\n    return void 0;\n  }\n  if (value === true || value === 'true' || value === '1') {\n    value = 1;\n  }\n  if (value === false || value === 'false' || value === '0') {\n    value = 0;\n  }\n  return value;\n}\n\nconst NUMBER_PATTERN = \"([0-9]*)\\\\.([0-9]+)|([0-9]+)\";\n\nconst OFFSET_ANY_PATTERN = `(${NUMBER_PATTERN})([%pP])?`;\nconst RANGE_VALUE_RE = RegExp(`^${OFFSET_ANY_PATTERN}$`);\nconst OFFSET_ANY_PATTERN_RE = RegExp(`(${OFFSET_ANY_PATTERN})\\\\.\\\\.(${OFFSET_ANY_PATTERN})`);\n\n// Split a range into the start and end values\nfunction split_range(range) { // :nodoc:\n  switch (range.constructor) {\n  case String:\n    if (!OFFSET_ANY_PATTERN_RE.test(range)) {\n      return range;\n    }\n    return range.split(\"..\");\n  case Array:\n    return [first(range), last(range)];\n  default:\n    return [null, null];\n  }\n}\n\nfunction norm_range_value(value) { // :nodoc:\n  let offset = String(value).match(RANGE_VALUE_RE);\n  if (offset) {\n    let modifier = offset[5] ? 'p' : '';\n    value = `${offset[1] || offset[4]}${modifier}`;\n  }\n  return value;\n}\n\n/**\n * A video codec parameter can be either a String or a Hash.\n * @param {Object} param <code>vc_<codec>[ : <profile> : [<level>]]</code>\n *                       or <code>{ codec: 'h264', profile: 'basic', level: '3.1' }</code>\n * @return {String} <code><codec> : <profile> : [<level>]]</code> if a Hash was provided\n *                   or the param if a String was provided.\n *                   Returns null if param is not a Hash or String\n */\nfunction process_video_params(param) {\n  switch (param.constructor) {\n  case Object: {\n    let video = \"\";\n    if ('codec' in param) {\n      video = param.codec;\n      if ('profile' in param) {\n        video += \":\" + param.profile;\n        if ('level' in param) {\n          video += \":\" + param.level;\n        }\n      }\n    }\n    return video;\n  }\n  case String:\n    return param;\n  default:\n    return null;\n  }\n}\n/**\n * Returns a Hash of parameters used to create an archive\n * @private\n * @param {object} options\n * @return {object} Archive API parameters\n */\n\nfunction archive_params(options = {}) {\n  return {\n    allow_missing: exports.as_safe_bool(options.allow_missing),\n    async: exports.as_safe_bool(options.async),\n    expires_at: options.expires_at,\n    flatten_folders: exports.as_safe_bool(options.flatten_folders),\n    flatten_transformations: exports.as_safe_bool(options.flatten_transformations),\n    keep_derived: exports.as_safe_bool(options.keep_derived),\n    mode: options.mode,\n    notification_url: options.notification_url,\n    prefixes: options.prefixes && toArray(options.prefixes),\n    fully_qualified_public_ids: options.fully_qualified_public_ids && toArray(options.fully_qualified_public_ids),\n    public_ids: options.public_ids && toArray(options.public_ids),\n    skip_transformation_name: exports.as_safe_bool(options.skip_transformation_name),\n    tags: options.tags && toArray(options.tags),\n    target_format: options.target_format,\n    target_public_id: options.target_public_id,\n    target_tags: options.target_tags && toArray(options.target_tags),\n    timestamp: options.timestamp || exports.timestamp(),\n    transformations: utils.build_eager(options.transformations),\n    type: options.type,\n    use_original_filename: exports.as_safe_bool(options.use_original_filename)\n  };\n}\n\nexports.create_source_tag = function create_source_tag(src, source_type, codecs = null) {\n  let video_type = source_type === 'ogv' ? 'ogg' : source_type;\n  let mime_type = `video/${video_type}`;\n  if (!isEmpty(codecs)) {\n    let codecs_str = isArray(codecs) ? codecs.join(', ') : codecs;\n    mime_type += `; codecs=${codecs_str}`;\n  }\n  return `<source ${utils.html_attrs({ src, type: mime_type })}>`;\n};\n\nfunction build_explicit_api_params(public_id, options = {}) {\n  return [exports.build_upload_params(extend({}, { public_id }, options))];\n}\n\nfunction generate_responsive_breakpoints_string(breakpoints) {\n  if (breakpoints == null) {\n    return null;\n  }\n  breakpoints = clone(breakpoints);\n  if (!isArray(breakpoints)) {\n    breakpoints = [breakpoints];\n  }\n  for (let j = 0; j < breakpoints.length; j++) {\n    let breakpoint_settings = breakpoints[j];\n    if (breakpoint_settings != null) {\n      if (breakpoint_settings.transformation) {\n        breakpoint_settings.transformation = utils.generate_transformation_string(\n          clone(breakpoint_settings.transformation)\n        );\n      }\n    }\n  }\n  return JSON.stringify(breakpoints);\n}\n\nfunction build_streaming_profiles_param(options = {}) {\n  let params = pickOnlyExistingValues(options, \"display_name\", \"representations\");\n  if (isArray(params.representations)) {\n    params.representations = JSON.stringify(params.representations.map(\n      r => ({\n        transformation: utils.generate_transformation_string(r.transformation)\n      })\n    ));\n  }\n  return params;\n}\n\nfunction hashToParameters(hash) {\n  return entries(hash).reduce((parameters, [key, value]) => {\n    if (isArray(value)) {\n      key = key.endsWith('[]') ? key : key + '[]';\n      const items = value.map(v => [key, v]);\n      parameters = parameters.concat(items);\n    } else {\n      parameters.push([key, value]);\n    }\n    return parameters;\n  }, []);\n}\n\n/**\n * Convert a hash of values to a URI query string.\n * Array values are spread as individual parameters.\n * @param {object} hash Key-value parameters\n * @return {string} A URI query string.\n */\nfunction hashToQuery(hash) {\n  return hashToParameters(hash).map(\n    ([key, value]) => `${querystring.escape(key)}=${querystring.escape(value)}`\n  ).join('&');\n}\n\n/**\n * Verify that the parameter `value` is defined and it's string value is not zero.\n * <br>This function should not be confused with `isEmpty()`.\n * @private\n * @param {string|number} value The value to check.\n * @return {boolean} True if the value is defined and not empty.\n */\n\nfunction present(value) {\n  return value != null && (\"\" + value).length > 0;\n}\n\n/**\n * Returns a new object with key values from source based on the keys.\n * `null` or `undefined` values are not copied.\n * @private\n * @param {object} source The object to pick values from.\n * @param {...string} keys One or more keys to copy from source.\n * @return {object} A new object with the required keys and values.\n */\n\nfunction pickOnlyExistingValues(source, ...keys) {\n  let result = {};\n  if (source) {\n    keys.forEach((key) => {\n      if (source[key] != null) {\n        result[key] = source[key];\n      }\n    });\n  }\n  return result;\n}\n\n/**\n * Returns a JSON array as String.\n * Yields the array before it is converted to JSON format\n * @private\n * @param {object|String|Array<object>} data\n * @param {function(*):*} [modifier] called with the array before the array is stringified\n * @return {String|null} a JSON array string or `null` if data is `null`\n */\n\nfunction jsonArrayParam(data, modifier) {\n  if (!data) {\n    return null;\n  }\n  if (isString(data)) {\n    data = JSON.parse(data);\n  }\n  if (!isArray(data)) {\n    data = [data];\n  }\n  if (isFunction(modifier)) {\n    data = modifier(data);\n  }\n  return JSON.stringify(data);\n}\n\nfunction optionalRequire(moduleName) {\n  let module;\n  try {\n    module = require(moduleName)\n    return module;\n  } catch (e) {\n    if (e.code === \"MODULE_NOT_FOUND\") {\n      return null;\n    }\n    throw e;\n  }\n}\n\n/**\n * Empty function - do nothing\n *\n */\nexports.NOP = function () {};\nexports.generate_auth_token = generate_auth_token;\nexports.getUserAgent = getUserAgent;\nexports.build_upload_params = build_upload_params;\nexports.build_multi_and_sprite_params = build_multi_and_sprite_params;\nexports.api_download_url = api_download_url;\nexports.timestamp = () => Math.floor(new Date().getTime() / 1000);\nexports.option_consume = consumeOption; // for backwards compatibility\nexports.build_array = toArray; // for backwards compatibility\nexports.encode_double_array = encodeDoubleArray;\nexports.encode_key_value = encode_key_value;\nexports.encode_context = encode_context;\nexports.build_eager = build_eager;\nexports.build_custom_headers = build_custom_headers;\nexports.generate_transformation_string = generate_transformation_string;\nexports.updateable_resource_params = updateable_resource_params;\nexports.extractUrlParams = extractUrlParams;\nexports.extractTransformationParams = extractTransformationParams;\nexports.patchFetchFormat = patchFetchFormat;\nexports.url = url;\nexports.video_url = video_url;\nexports.video_thumbnail_url = video_thumbnail_url;\nexports.api_url = api_url;\nexports.random_public_id = random_public_id;\nexports.signed_preloaded_image = signed_preloaded_image;\nexports.api_sign_request = api_sign_request;\nexports.clear_blank = clear_blank;\nexports.merge = merge;\nexports.sign_request = sign_request;\nexports.webhook_signature = webhook_signature;\nexports.verifyNotificationSignature = verifyNotificationSignature;\nexports.process_request_params = process_request_params;\nexports.private_download_url = private_download_url;\nexports.zip_download_url = zip_download_url;\nexports.download_archive_url = download_archive_url;\nexports.download_zip_url = download_zip_url;\nexports.cloudinary_js_config = cloudinary_js_config;\nexports.v1_adapters = v1_adapters;\nexports.as_safe_bool = as_safe_bool;\nexports.archive_params = archive_params;\nexports.build_explicit_api_params = build_explicit_api_params;\nexports.generate_responsive_breakpoints_string = generate_responsive_breakpoints_string;\nexports.build_streaming_profiles_param = build_streaming_profiles_param;\nexports.hashToParameters = hashToParameters;\nexports.present = present;\nexports.only = pickOnlyExistingValues; // for backwards compatibility\nexports.pickOnlyExistingValues = pickOnlyExistingValues;\nexports.jsonArrayParam = jsonArrayParam;\nexports.download_folder = download_folder;\nexports.base_api_url = base_api_url;\nexports.download_backedup_asset = download_backedup_asset;\nexports.optionalRequire = optionalRequire;\n\n// was exported before, so kept for backwards compatibility\nexports.DEFAULT_POSTER_OPTIONS = DEFAULT_POSTER_OPTIONS;\nexports.DEFAULT_VIDEO_SOURCE_TYPES = DEFAULT_VIDEO_SOURCE_TYPES;\n\nObject.assign(module.exports, {\n  normalize_expression,\n  at,\n  clone,\n  extend,\n  filter,\n  includes,\n  isArray,\n  isEmpty,\n  isNumber,\n  isObject,\n  isRemoteUrl,\n  isString,\n  isUndefined,\n  keys: source => Object.keys(source),\n  ensurePresenceOf\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}